{
    "id": 1141623,
    "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTQxNjIz",
    "url": "https://hackerone.com/reports/1141623",
    "title": "Unexpected input validation of octal literals in nodejs v15.12.0 and below returns defined values for all undefined octal literals.",
    "state": "Closed",
    "substate": "not-applicable",
    "severity_rating": "critical",
    "readable_substate": "N/A",
    "created_at": "2021-03-30T14:26:29.640Z",
    "submitted_at": "2021-03-30T14:26:29.714Z",
    "is_member_of_team?": false,
    "is_organization_group_member?": false,
    "reporter": {
        "disabled": false,
        "username": "sickcodes",
        "url": "/sickcodes",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/yhqjS3Lp1zFH9fw8UdN1WUFh/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
        },
        "is_me?": false,
        "cleared": false,
        "verified": false,
        "hackerone_triager": false,
        "hacker_mediation": false
    },
    "team": {
        "id": 22984,
        "url": "https://hackerone.com/nodejs",
        "handle": "nodejs",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
            "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "permissions": [],
        "submission_state": "open",
        "default_currency": "usd",
        "awards_miles": false,
        "offers_bounties": true,
        "state": "public_mode",
        "only_cleared_hackers": false,
        "pentest_feature_enabled?": false,
        "profile": {
            "name": "Node.js",
            "twitter_handle": "nodejs",
            "website": "https://nodejs.org",
            "about": "The Node.js JavaScript Runtime"
        }
    },
    "has_bounty?": false,
    "in_validation?": false,
    "can_view_team": true,
    "can_view_report": true,
    "is_external_bug": false,
    "is_published": false,
    "is_participant": false,
    "has_collaborators": false,
    "submitted_by_team_member": false,
    "stage": 4,
    "public": true,
    "visibility": "full",
    "cve_ids": [
        "CVE-2021-28918",
        "CVE-2020-28360"
    ],
    "singular_disclosure_disabled": true,
    "disclosed_at": "2021-06-14T12:46:17.325Z",
    "bug_reporter_agreed_on_going_public_at": "2021-04-28T02:46:43.512Z",
    "team_member_agreed_on_going_public_at": "2021-06-14T12:46:17.180Z",
    "comments_closed?": false,
    "facebook_team?": false,
    "team_private?": false,
    "vulnerability_information": "**Summary:**\n Unexpected input validation of octal literals in the nodejs implementation of V8 JavaScript engine V8 9.0.257.13 and below returns defined values for all undefined octal literals where otherwise should return undefined. Input data 08, 09... 078, 079 should return undefined, as evinced by 0o8, 0o9 etc. This affects ALL downstream nodejs software. An attacker could abuse a myriad of downstream software that relies on nodejs, for example any of the 1,570,041 npm packages that expect an undefined response for `eval(08)`;. One such example is netmask npm package: the package is unable to evaluate any octal literal containing an 8 or a 9 leading to SSRF, LFI, RFI.\n\n**Description:**\nDownstream direct references:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal\nhttps://sick.codes/universal-netmask-npm-package-used-by-270000-projects-vulnerable-to-octal-input-data-server-side-request-forgery-remote-file-inclusion-local-file-inclusion-and-more-cve-2021-28918/\n\nCVSS Pending\nhttps://sick.codes/sick-2021-011\n\nCVSS 9.8 Critical\nhttps://nvd.nist.gov/vuln/detail/CVE-2020-28360\n\n## Steps To Reproduce:\n\nnodejs, as well as Chrome Console:\n```js\nconsole.log(04);\nconsole.log(05);\nconsole.log(06);\nconsole.log(07);\nconsole.log(08);\nconsole.log(09);\nconsole.log(010);\nconsole.log(0o4);\nconsole.log(0o5);\nconsole.log(0o6);\nconsole.log(0o7);\nconsole.log(0o8);\nconsole.log(0o9);\n```\n\n```bash\n\nSTATEMENT='\nconsole.log(04);\nconsole.log(05);\nconsole.log(06);\nconsole.log(07);\nconsole.log(08);\nconsole.log(09);\nconsole.log(010);\n'\n\nnode <<EOF\n${STATEMENT}\nEOF\n\ncoffee <<EOF\n${STATEMENT}\nEOF\n\nts-node <<EOF\n${STATEMENT}\nEOF\n```\n\nnode (V8) returns:\n```\n4\n5\n6\n7\n8\n9\n8\n```\nHowever, it should absolutely be:\n```\n4\n5\n6\n7\nundef\nundef\n8\n```\n\n## expected results\n\n```bash\nSTATEMENT='\nconsole.log(0o4);\nconsole.log(0o5);\nconsole.log(0o6);\nconsole.log(0o7);\nconsole.log(0o8);\nconsole.log(0o9);\nconsole.log(0o10);\n'\n\nnode <<EOF\n${STATEMENT}\nEOF\n\ncoffee <<EOF\n${STATEMENT}\nEOF\n\nts-node <<EOF\n${STATEMENT}\nEOF\n```\n\nEvery other JS runtime evaluates defined as undefined.\n\nCWE-20: Improper Input Validation\n\nVERSION\nGoogle Chrome   90.0.4430.40 (Official Build) unknown (64-bit)\nRevision 13a486ce2d7548247f6314bbccf47e47773938f6-refs/branch-heads/4430@{#715}\nOS  Linux\nJavaScript  V8 9.0.257.13\nUser Agent  Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.40 Safari/537.36\nCommand Line    ./chrome --flag-switches-begin --flag-switches-end\n\nREPRODUCTION CASE\n\n```bash\nSTATEMENT='\nconsole.log(04);\nconsole.log(05);\nconsole.log(06);\nconsole.log(07);\nconsole.log(08);\nconsole.log(09);\nconsole.log(010);\n'\n\nnode <<EOF\n${STATEMENT}\nEOF\n\ncoffee <<EOF\n${STATEMENT}\nEOF\n\nts-node <<EOF\n${STATEMENT}\nEOF\n```\nFOR CRASHES, PLEASE INCLUDE THE FOLLOWING ADDITIONAL INFORMATION\n```\nconsole.log(04);\nconsole.log(05);\nconsole.log(06);\nconsole.log(07);\nconsole.log(08);\nconsole.log(09);\nconsole.log(010);\nconsole.log(0o4);\nconsole.log(0o5);\nconsole.log(0o6);\nconsole.log(0o7);\nconsole.log(0o8);\nconsole.log(0o9);\nconsole.log(0o10);\nVM78:12 Uncaught SyntaxError: Invalid or unexpected token\n\nconsole.log(04);\nconsole.log(05);\nconsole.log(06);\nconsole.log(07);\nconsole.log(08);\nconsole.log(09);\nconsole.log(010);\nconsole.log(0o4);\nconsole.log(0o5);\nconsole.log(0o6);\nconsole.log(0o7);\nVM111:1 4\nVM111:2 5\nVM111:3 6\nVM111:4 7\nVM111:5 8\nVM111:6 9\nVM111:7 8\nVM111:8 4\nVM111:9 5\nVM111:10 6\nVM111:11 7\n```\n\n## Impact: [add why this issue matters]\nSSRF, RFI, LFI in absolutely any downstream package that relies on octal literal IP address translation.\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal\n\n## Supporting Material/References:\n\nThis bug I previously submitted to Chromium V8 (yesterday) which was rejected as \"per spec\"\n\nHowever, this does not account for the fact that this is extremely dangerous for nodejs webapps, if not all nodejs web applications.\n\nMozilla interprets ECMA-262 octal literals containing 8 or 9 as not legal.\n```\n08 is not a legal ECMA-262 octal constant.\n09 is not a legal ECMA-262 octal constant.\n```\n\nThe spec:\n\nhttps://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n\n## Impact\n\nAs per Chromium's response as well as our own research, random deviations in octal literal is catastrophic.\n\nThe issue highly affects parseInt. It should return undefined for truly undefined results.\n\n```console\n> parseInt(08);\n8\n> parseInt(0177);\n127\n> parseInt(012);\n10\n> parseInt(0000127);\n87\n> \n```",
    "weakness": {
        "id": 20,
        "name": "Use of Inherently Dangerous Function"
    },
    "original_report_id": null,
    "original_report_url": null,
    "attachments": [],
    "allow_singular_disclosure_at": null,
    "vote_count": 3,
    "voters": [
        "sakshamguruji",
        "ekgaribadmi",
        "kingstrome"
    ],
    "severity": {
        "rating": "critical",
        "score": 10.0,
        "author_type": "User",
        "metrics": {
            "attack_vector": "network",
            "attack_complexity": "low",
            "privileges_required": "none",
            "user_interaction": "none",
            "scope": "changed",
            "confidentiality": "high",
            "integrity": "high",
            "availability": "high"
        }
    },
    "structured_scope": {
        "databaseId": 666,
        "asset_type": "SOURCE_CODE",
        "asset_identifier": "https://github.com/nodejs/node",
        "max_severity": "critical"
    },
    "abilities": {
        "assignable_team_members": [],
        "assignable_team_member_groups": []
    },
    "activities": [
        {
            "id": 11185756,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugNeedsMoreInfo",
            "message": "Thanks for reporting. The Node.js security model implies that all scripts are considered trusted, including anything that is passed through `eval()` - in other terms, it's not safe to eval() untrusted code. This also include new Function(). My understanding is that this is non-exploitable without running untrusted code.\n\nI fully trust the V8 team in their assessment of considering this behavior as \"per spec\" - there is nothing we can do about it as V8 is our JavaScript engine.\n\nI concur that the vulnerability exists in the private-ip and netmask packages. ",
            "automated_response": false,
            "created_at": "2021-03-30T16:22:36.289Z",
            "updated_at": "2021-03-30T16:22:36.289Z",
            "actor": {
                "username": "mcollina",
                "cleared": false,
                "verified": false,
                "url": "/mcollina",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 11186493,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugNew",
            "message": "\nThank you for getting back so quickly!\n\nThe reason I'm tracking this issue with nodejs, is that Chromium Security have responded as follows:\n\n```\nThere are 3 things mixed up here:\n- Octal literal parsing in JavaScript\n- parseInt\n- URL parsing\n\nURL parsing is not implemented by V8 but by V8 embedders. It's generally not implemented in terms of octal literal parsing or parseInt, but is a separate implmentation.\n\nI haven't had time to look at the URL spec & URL parsing implementation in Chrome in detail. If there are some problems there in Node, they're independent of V8.\n\nRe: \"Why does Mozilla consider 08 and 09 not legal ECMA-262?\"\n\nI don't know why the doc above says that; Firefox (SpiderMonkey) seems to implement the spec exactly as described in comment 3.\n```\n\nAlso, regarding the `eval` in initial report, I should’ve replaced with `parseInt()` as `eval` is not quite an appropriate example.\n\nThe argument is that Mozilla considers any literal octal input with an 8 or 9, anywhere in the literal, not a legal ECMA-262 octal constant.\n\n\"Octal literals and octal escape sequences are deprecated and will throw a SyntaxError in strict mode. With ECMAScript 2015 and later, the standardized syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"O\" (0o or 0O).\"\n\n \"0\"-prefixed octal literals and octal escape sequences are deprecated\"\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal\n\nDo you think Mozilla’s interpretation is wrong or right?\n\n\n\"The ECMAScript 5 specification of the function parseInt no longer allows implementations to treat Strings beginning with a 0 character as octal values. Many implementations have adopted this behavior as of 2021.\"\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#octal_interpretations_with_no_radix\n\nThe reason I'm raising the issue is that we had to completely remove parseInt from Netmask: https://github.com/rs/node-netmask/commit/3f19a056c4eb808ea4a29f234274c67bc5a848f4\n\n\n> parseInt(010)\n8\n> parseInt(09)\n9\n> parseInt(08)\n8\n> parseInt(07)\n7\n> \n\n\nThe issue is with parseInt() are if 8 or 9, are anywhere in the literal, it should be undefined.\n\n```\nDEC|OCT\n1   1\n2   2\n3   3\n4   4\n5   5\n6   6\n7   7\nErr:502 8\nErr:502 9\n8   10\n9   11\n10  12\n11  13\n12  14\n13  15\n14  16\n15  17\nErr:502 18\nErr:502 19\n16  20\n17  21\n...\n\n\n55  67\nErr:502 68\nErr:502 69\n56  70\n57  71\n58  72\n59  73\n60  74\n61  75\n62  76\n63  77\nErr:502 78\nErr:502 79\nErr:502 80\nErr:502 81\nErr:502 82\nErr:502 83\nErr:502 84\nErr:502 85\nErr:502 86\nErr:502 87\nErr:502 88\nErr:502 89\nErr:502 90\nErr:502 91\nErr:502 92\nErr:502 93\nErr:502 94\nErr:502 95\nErr:502 96\nErr:502 97\nErr:502 98\nErr:502 99\n64  100\n65  101\n66  102\n67  103\n\n```\n\n",
            "automated_response": false,
            "created_at": "2021-03-30T17:01:44.312Z",
            "updated_at": "2021-03-30T17:01:44.312Z",
            "actor": {
                "username": "sickcodes",
                "cleared": false,
                "verified": false,
                "url": "/sickcodes",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/yhqjS3Lp1zFH9fw8UdN1WUFh/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "attachments": [
                {
                    "id": 1248434,
                    "filename": "Screenshot_2021-03-30_16-58-37.png",
                    "type": "image/png",
                    "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/mhgcotn0k9cevk69v72e42yc7fr8?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_2021-03-30_16-58-37.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_2021-03-30_16-58-37.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUR2ZSYPL%2F20230829%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230829T071003Z&X-Amz-Expires=733&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCuJ7GGKM7kIZUlE%2BEjrt%2Bxv5BG%2Fd%2F6MZdNdXaAdLbypAIgWhnU6okSPCcwU2VK%2BkQwglklOGyuwTSp8e0XgpiaTsMquwUImv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDCxq6aFU7nsH%2B6tVECqPBYfRIb1SThCbd1maLSA%2Bz34g%2Bwh%2B0kLpyIzK8gI1I376Nfiqm4jzHZin%2Fi1t9CbVntbcdVUKpl5LBomGC0biywH2qmIDQYHf%2B4Ivdm4qJgeYjBFkVjXXaGrGIHVjm4Qm5vbSgTAqTkhTdRAkAkbHHUGl2LTf5yXK8qQ3MO9rzxQ6jcKMn31IIHPSGMpQ8Pc%2ByHvNCTtzjjy2Fj1BGiWx9r9MQ82VbipBPKywpGx71D3bfxbOAIe6jbk6DN60zvDpMZh%2BbhfkjNXMqCjkTt6chd2%2BmdWqYwN7tjqN7hCnmfKFcO%2FZM%2FND7d9ihU14L0e7fUYaP9ttwDTRSzHNWQKhbLdIPUeCkr6jUknEaom4MsGV6hp5FRyrmf5XaSLIQPROIveYcyCmH%2B9bLkSG1%2FJc%2Byha0BDRydwqtkJHgGPwKFhoo5yPxGKyyanGWMmNXfmPMV%2FBnO2i3nUNmQVRz009ACtL1aWD3LFdxWCn3GN8UA1%2Frjv8TCFgaXA7ZjUtQqf%2Bg1B%2F0mfgiZ9PxUj%2BR2XNIQO3RfPKE0b6uQdmnu85EJrWcIccSqndUSSZrGk%2F4%2FkGYD1Etg6l6IlQqxLOqGwJiYjjI6lf74d71xjdgh2l4pP8QOknOj%2Fyr7CkHtRRt0ujdKmW0BwwkJXxuYSdnQJTyFsVChUZGVXmTiRbYiizTg8sJf6YYQHNXgWw4Oh1KhYXFgQbHVcs%2FX95SDxAlFiOOE08k9RSYETfDpIwmwEkyAyLcBJCcD%2Bsu2hhI%2Fit1J%2BktZAnq9eCTmWVsPM9tXGsX1b0jSb9sb6lecY6usDkO0tuAdnZ0%2B8pbrZuVqjyTKfdZL4aeZIuOlTLkpr7OsCUEQ8aEJGJZx8at6H5wF1mYnIwyYK1pwY6sQHa9NWtSr124WBteOMuZ0gRxs4h7%2B45MQ4Jajx54ZYNp3CzErjQsi074sjhlC%2BgUdUkdv9AJ%2FXnIjscPmbEAOBS1ezvurw3cyM4cDGTs0DFCEF4mtFK3UsBx8CsE0ACWlzoXkcfZWltI2e4mWNuLQrhAKsm7Lpp2%2B23Qc88gL8I%2BFFlGmA68WBDP9ucnEldjgnESenwlTYaBCrPUv9ZnIwNPzlW5RAFvpGY%2BRPFLPWOHC0%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=9f94b9c5b9096f52938f9a861f46d2fc7eaaccdbbd18d34a266f9089a91c52ed"
                }
            ],
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 11186574,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "I do not understand how  `parseInt` returning a wrong value with bad input it is a vulnerability for Node.js. Considering that we are not implementing parseInt, It might be a bug in V8 or in the spec if it allows so (I have not digged into the spec, as said we trust V8).\n\n---\n\nRegarding URL - your report does not mention URL parsing. If a vulnerability exists there, please include a repro.  \n\n",
            "automated_response": false,
            "created_at": "2021-03-30T17:12:09.646Z",
            "updated_at": "2021-03-30T17:12:09.646Z",
            "actor": {
                "username": "mcollina",
                "cleared": false,
                "verified": false,
                "url": "/mcollina",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 11187823,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "I doesn't really make sense to call `parseInt` with a number literal (octal or decimal), as the argument is already a number and `parseInt` is just going to convert that number to a string and then convert the string back to the same number.\nExample: `parseInt(010)` is equivalent to `parseInt(8)` and returns `8`. Note that it is not possible to end up with such a case with user input unless the code is dynamically constructed and executed (such as with `eval()`, `new Function()` or the Node.js `vm` module. \n`parseInt` is supposed to be called with a string argument, and is not vulnerable in that case because it has a second radix argument that determines how the conversion is done: `parseInt('010')` is equivalent to `parseInt('010', 10)` and returns `10`.",
            "automated_response": false,
            "created_at": "2021-03-30T19:08:43.218Z",
            "updated_at": "2021-03-30T19:08:43.218Z",
            "actor": {
                "username": "targos",
                "cleared": false,
                "verified": false,
                "url": "/targos",
                "profile_picture_urls": {
                    "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/oti7obr6lrnkqed20csu0w8rh9en/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc?response-content-disposition=inline%3B%20filename%3D%22targos-small.jpg%22%3B%20filename%2A%3DUTF-8%27%27targos-small.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUR2ZSYPL%2F20230829%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230829T071003Z&X-Amz-Expires=733&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCuJ7GGKM7kIZUlE%2BEjrt%2Bxv5BG%2Fd%2F6MZdNdXaAdLbypAIgWhnU6okSPCcwU2VK%2BkQwglklOGyuwTSp8e0XgpiaTsMquwUImv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDCxq6aFU7nsH%2B6tVECqPBYfRIb1SThCbd1maLSA%2Bz34g%2Bwh%2B0kLpyIzK8gI1I376Nfiqm4jzHZin%2Fi1t9CbVntbcdVUKpl5LBomGC0biywH2qmIDQYHf%2B4Ivdm4qJgeYjBFkVjXXaGrGIHVjm4Qm5vbSgTAqTkhTdRAkAkbHHUGl2LTf5yXK8qQ3MO9rzxQ6jcKMn31IIHPSGMpQ8Pc%2ByHvNCTtzjjy2Fj1BGiWx9r9MQ82VbipBPKywpGx71D3bfxbOAIe6jbk6DN60zvDpMZh%2BbhfkjNXMqCjkTt6chd2%2BmdWqYwN7tjqN7hCnmfKFcO%2FZM%2FND7d9ihU14L0e7fUYaP9ttwDTRSzHNWQKhbLdIPUeCkr6jUknEaom4MsGV6hp5FRyrmf5XaSLIQPROIveYcyCmH%2B9bLkSG1%2FJc%2Byha0BDRydwqtkJHgGPwKFhoo5yPxGKyyanGWMmNXfmPMV%2FBnO2i3nUNmQVRz009ACtL1aWD3LFdxWCn3GN8UA1%2Frjv8TCFgaXA7ZjUtQqf%2Bg1B%2F0mfgiZ9PxUj%2BR2XNIQO3RfPKE0b6uQdmnu85EJrWcIccSqndUSSZrGk%2F4%2FkGYD1Etg6l6IlQqxLOqGwJiYjjI6lf74d71xjdgh2l4pP8QOknOj%2Fyr7CkHtRRt0ujdKmW0BwwkJXxuYSdnQJTyFsVChUZGVXmTiRbYiizTg8sJf6YYQHNXgWw4Oh1KhYXFgQbHVcs%2FX95SDxAlFiOOE08k9RSYETfDpIwmwEkyAyLcBJCcD%2Bsu2hhI%2Fit1J%2BktZAnq9eCTmWVsPM9tXGsX1b0jSb9sb6lecY6usDkO0tuAdnZ0%2B8pbrZuVqjyTKfdZL4aeZIuOlTLkpr7OsCUEQ8aEJGJZx8at6H5wF1mYnIwyYK1pwY6sQHa9NWtSr124WBteOMuZ0gRxs4h7%2B45MQ4Jajx54ZYNp3CzErjQsi074sjhlC%2BgUdUkdv9AJ%2FXnIjscPmbEAOBS1ezvurw3cyM4cDGTs0DFCEF4mtFK3UsBx8CsE0ACWlzoXkcfZWltI2e4mWNuLQrhAKsm7Lpp2%2B23Qc88gL8I%2BFFlGmA68WBDP9ucnEldjgnESenwlTYaBCrPUv9ZnIwNPzlW5RAFvpGY%2BRPFLPWOHC0%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a852c646881ecffd3c071a4682ee9921ecbe9edf6cef54ecd7d9062773e8d2e7"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 11204878,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Thanks for getting back to me in detail, and I appreciate the furhter explanation.\n\nSorry for going in circles here, just trying to find out if I am misinterpreting the ECMA or something else is happening.\n\nThe comment on line 73:\nhttps://github.com/nodejs/node/blob/master/deps/v8/test/webkit/fast/js/kde/GlobalObject.js#L73\n\n\n```js\nshouldBe('parseInt(\"015\")', \"15\"); // ES5 prohibits parseInt from handling octal, see annex E.\n```\n\nIs the above comment referring to strings?\n\nOn the other hand, Mozilla (for the exact same test):\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#using_parseint\n\n`parseInt('015', 10)    // but `parseInt(015, 8)` will return 13`\n\nI assume that comment is a typo since V8 shows:\n\n```console\n> parseInt(015, 8)\n11\n> parseInt('015', 8)\n13\n```\n\nI'm not really interested in the bounty, I'm just trying to look out for other developers.\n\nHere's where I'm coming from relevant to your example:\n\n```console\n> parseInt('010')\n10\n> parseInt('010', 10)\n10\n> parseInt(010, 10)\n8\n```\n\nBut change it to 8's and this is pretty much where I'm coming from, relevant to your example:\n\n```console\n> parseInt('08')\n8\n> parseInt('08', 10)\n8\n> parseInt(08, 10)  <---- this should be undefined\n8\n```\n\nThe unexpectedness comes from anytime there's an 8 or 9 in the string:\n\n```console\n> parseInt('054861')\n54861\n> parseInt('054861', 10)\n54861\n> parseInt(054861, 10)  <---- this should be undefined\n54861\n```\n\nThe main argument here is that it will catch a lot of developers out, like the netmask one which was there for many years, and had 278k projects using it.\n\nAnd if nobody is supposed to be using parseInt unless it's a string argument, why not enforce `0o` notation for good?\n\nI really appreciate the discussion so far, just trying to look out for others who will get unexpected results, which leads to mayhem downstream, but if it's up to spec, it's up to spec. We also published this one today: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29662",
            "automated_response": false,
            "created_at": "2021-04-01T00:21:42.856Z",
            "updated_at": "2021-04-01T00:21:42.856Z",
            "actor": {
                "username": "sickcodes",
                "cleared": false,
                "verified": false,
                "url": "/sickcodes",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/yhqjS3Lp1zFH9fw8UdN1WUFh/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 11207622,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "The lines of code you are referring to are from V8 - Node.js vendors its dependencies. \n\nI do not feel I am qualified to discuss spec compliance of JavaScript runtimes. I would recommend you to open an issue at https://github.com/tc39/ecma262 or https://bugs.chromium.org/p/v8/issues/list or anyway discuss this publicly with spec experts. ",
            "automated_response": false,
            "created_at": "2021-04-01T08:06:41.510Z",
            "updated_at": "2021-04-01T08:06:41.510Z",
            "actor": {
                "username": "mcollina",
                "cleared": false,
                "verified": false,
                "url": "/mcollina",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 11215872,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugNotApplicable",
            "message": "Totally understand, will open a public issue on there. Thanks very much for the discussion on this anyway, and for being super responsive!",
            "automated_response": false,
            "created_at": "2021-04-01T19:30:54.888Z",
            "updated_at": "2021-04-01T19:30:54.888Z",
            "actor": {
                "username": "sickcodes",
                "cleared": false,
                "verified": false,
                "url": "/sickcodes",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/yhqjS3Lp1zFH9fw8UdN1WUFh/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 11216243,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "it was really interesting, thanks for reporting!",
            "automated_response": false,
            "created_at": "2021-04-01T20:05:28.610Z",
            "updated_at": "2021-04-01T20:05:28.610Z",
            "actor": {
                "username": "mcollina",
                "cleared": false,
                "verified": false,
                "url": "/mcollina",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 11540236,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "Hey team :) I'd like to discuss this at DEF CON talk and would be great if I can use the examples (with redacted names if you'd like) as part of a discussion into SSRF exploits.",
            "automated_response": false,
            "created_at": "2021-04-28T02:46:43.537Z",
            "updated_at": "2021-04-28T02:46:43.537Z",
            "first_to_agree": true,
            "actor": {
                "username": "sickcodes",
                "cleared": false,
                "verified": false,
                "url": "/sickcodes",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/yhqjS3Lp1zFH9fw8UdN1WUFh/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 11565499,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "I've contacted the rest of the team and I'll let you know asap.",
            "automated_response": false,
            "created_at": "2021-04-29T12:48:59.850Z",
            "updated_at": "2021-04-29T12:48:59.850Z",
            "actor": {
                "username": "mcollina",
                "cleared": false,
                "verified": false,
                "url": "/mcollina",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 12077919,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Thanks, any update on the disclosure request? The talk was accepted at DEF CON and it would be good to present some of the discussion here at DEF CON if that’s okay with the node js team. Just the contrast with what we discussed versus what chromium project discussed, regarding the same issue, and also versus SpiderMonkey.",
            "automated_response": false,
            "created_at": "2021-06-13T00:57:15.300Z",
            "updated_at": "2021-06-13T00:57:15.300Z",
            "actor": {
                "username": "sickcodes",
                "cleared": false,
                "verified": false,
                "url": "/sickcodes",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/yhqjS3Lp1zFH9fw8UdN1WUFh/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 12088298,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "I'm disclosing this as this issue is better discussed in public.",
            "automated_response": false,
            "created_at": "2021-06-14T12:46:17.207Z",
            "updated_at": "2021-06-14T12:46:17.207Z",
            "actor": {
                "username": "mcollina",
                "cleared": false,
                "verified": false,
                "url": "/mcollina",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        },
        {
            "id": 12088299,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ReportBecamePublic",
            "message": "",
            "automated_response": false,
            "created_at": "2021-06-14T12:46:17.363Z",
            "updated_at": "2021-06-14T12:46:17.363Z",
            "actor": {
                "username": "mcollina",
                "cleared": false,
                "verified": false,
                "url": "/mcollina",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "nodejs"
        }
    ],
    "activity_page_count": 1,
    "activity_page_number": 1,
    "summaries": [
        {
            "category": "team",
            "can_view?": true,
            "can_create?": false
        },
        {
            "category": "researcher",
            "can_view?": true,
            "can_create?": false
        }
    ]
}