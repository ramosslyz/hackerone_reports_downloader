{
    "id": 645299,
    "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82NDUyOTk=",
    "url": "https://hackerone.com/reports/645299",
    "title": "Private information exposed through GraphQL filters",
    "state": "Closed",
    "substate": "resolved",
    "severity_rating": "medium",
    "readable_substate": "Resolved",
    "created_at": "2019-07-16T17:27:51.341Z",
    "submitted_at": "2019-07-16T17:27:51.341Z",
    "is_member_of_team?": false,
    "is_organization_group_member?": false,
    "reporter": {
        "disabled": false,
        "username": "reigertje",
        "url": "/reigertje",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/000/345/154/1f8f4dc007e770f2363d19c9cfb75b1e83413cbf_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
        },
        "is_me?": false,
        "cleared": false,
        "verified": false,
        "hackerone_triager": false,
        "hacker_mediation": false
    },
    "team": {
        "id": 13,
        "url": "https://hackerone.com/security",
        "handle": "security",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
            "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "permissions": [],
        "submission_state": "open",
        "default_currency": "usd",
        "awards_miles": false,
        "offers_bounties": true,
        "state": "public_mode",
        "only_cleared_hackers": false,
        "pentest_feature_enabled?": false,
        "profile": {
            "name": "HackerOne",
            "twitter_handle": "Hacker0x01",
            "website": "https://hackerone.com",
            "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
        }
    },
    "has_bounty?": false,
    "in_validation?": false,
    "can_view_team": true,
    "can_view_report": true,
    "is_external_bug": false,
    "is_published": false,
    "is_participant": false,
    "has_collaborators": false,
    "submitted_by_team_member": true,
    "stage": 4,
    "public": true,
    "visibility": "full",
    "cve_ids": [],
    "singular_disclosure_disabled": false,
    "disclosed_at": "2019-07-23T07:21:54.470Z",
    "bug_reporter_agreed_on_going_public_at": "2019-07-23T07:21:54.347Z",
    "team_member_agreed_on_going_public_at": "2019-07-22T16:58:46.261Z",
    "comments_closed?": false,
    "facebook_team?": false,
    "team_private?": false,
    "vulnerability_information": "**Summary:**\nsecure schema can be circumvented for graphql `where` filters by using `or` operator. \n\n**Description:**\nWhen passing a where clause to a collection in the `graphql` endpoint, like `teams(where:{ state: {_eq: soft_launched}})` it queries the state through the secure schema - so it will not return any teams where the state does equal soft_launched but you're not allowed to see the state. \n\nHowever, when using an `or` operator. like `teams(where:{_or: [{state: {_eq: soft_launched}, {state: {_eq: soft_launched}]}` - only the first condition in the list seems to be converted to the secure variant. The second condition seems to be queried in the unprotected schema. So this will return teams where the state equals soft_launched - but I'm not allowed to see the state.\n\nLooking at the resulting query also verifies this. for `_or:[{submission_state: {_eq: open}}, {submission_state: {_eq: closed}}]`:\n{F530641}\nAs you can see, for the first condition, `submission_state` has been converted to the secure `__new_filterable_submission_state` - but not for the second one. This probably also happens for `and` operator, but `or` was easier to verify. \n\n### Steps To Reproduce\n\n1. Open any graphql client (eg. https://electronjs.org/apps/graphiql) \n2. Run query\n\n```\nquery {\n  teams(where:{_or:[{state:{_eq:soft_launched}}, {state:{_eq:soft_launched}}]}) {\n    edges {\n      node {\n        id\n        state\n      }\n    }\n  }\n}\n```\n\n3. Note that it returns teams with `state: null`, because you're not allowed to see it - but now we know it's soft_launched.\n4. Optionally, also note that removing one of the conditions from the `or` list does not return these teams. This is because the first item is converted to query through the secure schema. \n████\n\n## Impact\n\nExpose/derive private information from any filterable field for collections that use the `where` graphql filters. Potentially extra risky as we introduce more filter fields.",
    "weakness": {
        "id": 18,
        "name": "Information Disclosure"
    },
    "original_report_id": null,
    "original_report_url": null,
    "attachments": [
        {
            "id": 530641,
            "file_name": "vuln0.png",
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/530/641/a0747c160c50ac05f22de8b805a41ab6b4510e8c/vuln0.png?response-content-disposition=attachment%3B%20filename%3D%22vuln0.png%22%3B%20filename%2A%3DUTF-8%27%27vuln0.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRBXMBUE6%2F20230829%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230829T073249Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCi%2Fn6Cuuxp8BfcjTDd0Y9WigKVjgyi8j4AO7gsBX4FkgIgM1DkBhRrbtZdh9zvama2O2%2BFkhu4R3JfNLeArgwjhOAqugUIoP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDDiZPbgxzHZzAExCLSqOBctgXCfx1Fa7AX6HsYswOvCc35utfZkDrc7UQKSKOObn33qUOHImqsmg1wBfGgt0Bf4Ld2KhcHDX5WmiV5wKZRxm2jyLLjaFeM7AY0qNUCpekBDnmej55N%2Bx2itZfrdp06kGXTLFqxQJqR%2F7fw4L7HgYS6R2Vbkvy%2Fin1mfZP53zj2NFZI0gU9UoDAXAXxPYrgcn%2FX3he5T3kNoKtmAwh7yZ7TJK3FnqKTf1ldJtVEkzkV4Gpt1p2WgnICaNOccEVTIapnoEdqrATCq425iwMn2odQ9pvPuCKdorhmrrgf%2Bii5aedaaXwKafxmzCNESo9saERi1IaigwHAgWvgMgQELHLSB6%2FAwE9nTcpNYbfqGQsWgM8MElgGaWLAvPThcAG96px99ws1oxTn%2BccSHae1P17vTvPjU47N1VJDvsnvT4MUtSKlO3zF%2BwlPSLFMEJkSnMQcbVJaryZ9bCZj4TPK8AgyEk7NrGfDN0OY7o4ospMjqVeDm2uG97qtQMawHik7TRI1uf50GuJoF5ae6hZX%2BkS7M%2FwrOoHKpjcRvom4OAmjA2aORQX2p7z5PULOCogNHumNZc0ItMuq3Gr4tkbWhkKbOhj3tkrkh8Z1N%2BSvAgH5ivb7uDpbJ4kYF8eMcd8W31vOiHXyLHfL6t2VcshH4TSWC5CzJMpP4t1RAZXBbpMcSQGpMmYwtnRG%2FQ5dna7ontKbsvZmfhAH2mrw%2Fu%2BD5J6womLkE%2BHlh70m0Q7WNMnmUVWk%2FLw10aiAGYM5eGkWyM0XKUPw42b8UGbkGEuYvt7jDypeJSGBTbSOAv7i04kc0LbvXl1ZTdxuCdI1v%2BA0Tsfg43RPylGdoYcwqkOnIEJtLk6LYRzawXkV0pKjDhsLanBjqxAbQsXE60gBC8f3kMM4sUI9nub28aKMZYhJ8Cu5NYpheRyStUS1ow996%2BG5KR7E7oTS%2FC1WnM6eF%2F%2FY5k%2Bjy%2BflQr2erEsM06u4ahe%2BWCmsFT6l1jMLR6qOgKu%2BtGze%2FKfNgwH5Qe059Kz9enTuUPfZGgKn2aSyoRr7hexI6oTaN%2FEmzyQroXrurH6MYRtTID3oiBLMQ7F%2FyLfZF%2B4X%2BLRiNHZA8cnpiBq4JPKbRfceBIdA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=606ba9508f7a331df7c2dae1809dfdb950bdc8d34a5071af540064b0ee5cd574",
            "file_size": 102176,
            "type": "image/png"
        }
    ],
    "allow_singular_disclosure_at": "2019-08-21T16:58:46.538Z",
    "allow_singular_disclosure_after": -126887642.53170443,
    "singular_disclosure_allowed": true,
    "vote_count": 75,
    "voters": [
        "gregxsunday",
        "barbie_girl",
        "mashoud1122",
        "0ang3el",
        "jobert",
        "hide_khan",
        "michiel",
        "sameerphad72",
        "spam404",
        "lady_bug",
        "and 65 more..."
    ],
    "severity": {
        "rating": "medium",
        "score": 6.1,
        "author_type": "Team",
        "metrics": {
            "attack_vector": "network",
            "attack_complexity": "low",
            "privileges_required": "none",
            "user_interaction": "none",
            "scope": "unchanged",
            "confidentiality": "low",
            "integrity": "none",
            "availability": "none"
        }
    },
    "structured_scope": {
        "databaseId": 3,
        "asset_type": "URL",
        "asset_identifier": "hackerone.com",
        "max_severity": "critical"
    },
    "abilities": {
        "assignable_team_members": [],
        "assignable_team_member_groups": []
    },
    "activities": [
        {
            "id": 5351125,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Hi @reigertje,\n\nThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nKind regards,\n@tabascojellybeans ",
            "automated_response": false,
            "created_at": "2019-07-17T16:28:20.212Z",
            "updated_at": "2019-07-17T16:28:20.212Z",
            "actor": {
                "username": "h1_analyst_fernando",
                "cleared": false,
                "verified": false,
                "url": "/h1_analyst_fernando",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/137/012/ab9f6e7b1ceb2c40d1b957a077945cd82b0063b4_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": true,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "security"
        },
        {
            "id": 5351248,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ReportSeverityUpdated",
            "message": "",
            "automated_response": false,
            "created_at": "2019-07-17T16:50:29.670Z",
            "updated_at": "2019-07-17T16:50:29.670Z",
            "additional_data": {
                "old_severity": "High",
                "new_severity": "Medium (6.1)",
                "old_severity_id": 461482,
                "new_severity_id": 464469
            },
            "actor": {
                "username": "h1_analyst_leon",
                "cleared": false,
                "verified": false,
                "url": "/h1_analyst_leon",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/9G6pgB95of3ikt3prqQunAfD/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "security"
        },
        {
            "id": 5351316,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugTriaged",
            "message": "Thank you @reigertje! I was able to validate your report, and have submitted it to the appropriate remediation team for review. You will be updated on the status of this report as soon as there is additional information to share. Please note that the status and severity are subject to change. ",
            "automated_response": false,
            "created_at": "2019-07-17T17:02:04.799Z",
            "updated_at": "2019-07-17T17:02:04.799Z",
            "actor": {
                "username": "h1_analyst_leon",
                "cleared": false,
                "verified": false,
                "url": "/h1_analyst_leon",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/9G6pgB95of3ikt3prqQunAfD/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "security"
        },
        {
            "id": 5352366,
            "is_internal": false,
            "editable": false,
            "type": "Activities::NotEligibleForBounty",
            "message": "",
            "automated_response": false,
            "created_at": "2019-07-17T18:48:14.041Z",
            "updated_at": "2019-07-17T18:48:14.041Z",
            "actor": {
                "url": "/security",
                "ibb": false,
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "profile": {
                    "name": "HackerOne"
                }
            },
            "genius_execution_id": null,
            "team_handle": "security"
        },
        {
            "id": 5389406,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugResolved",
            "message": "Thanks again, @reigertje, great find and thanks for taking care of fixing it, too! This won't be eligible for a bounty because you're a team member of HackerOne.\n\nThe root cause of this vulnerability was definitely interesting: SQL queries that are executed in a GraphQL context use our so-called secure schema. This is a set of materialized views that contain a subset of the database. This is an additional measure we've taken against information disclosure vulnerabilities. When a normal query was executed, e.g. `query { teams(where: { state: { _eq: soft_launched } }) }`, the following code would be hit (simplified):\n\n```ruby\nset = Set.new\nset.add state: 'soft_launched'\n\n# => #<Set {{:state=>\"soft_launched\"}}>\n```\n\nWhen an `_or` query would be specified (e.g. `teams(where: { _or : [ { state: { _eq: soft_launched } }, { state: { _eq: soft_launched } } ] } )`, the following code would execute:\n\n```ruby\nset = Set.new\nset.add state: 'soft_launched'\nset.add state: 'soft_launched'\n\n# => #<Set {{:state=>\"soft_launched\"}}>\n```\n\nIn Ruby 2.3, due to the lack of comparing by identity, the `set` variable would only contain `{ \"state\" => \"soft_launched\" }` once. This caused the input to diverge from what was being used in the SQL query. This resulted in only the first occurrence of `state` to be queried against the secure schema. The second `state` query would be queried against the raw schema, which contains all `team` objects.\n\nThe solution to this problem was to use the `compare_by_identity` method that was introduced in Ruby 2.4, which changes the behavior and doesn't remove when any subsequent `where` clause is the same as the first one:\n\n```ruby\nset = Set.new.compare_by_identity\nset.add state: 'soft_launched'\nset.add state: 'soft_launched'\n\n# => #<Set {{:state=>\"soft_launched\"}, {:state=>\"soft_launched\"}}>\n```\n\nIn this particular case, this resulted in the ability to identify private programs when they have a published external program.",
            "automated_response": false,
            "created_at": "2019-07-22T16:56:13.159Z",
            "updated_at": "2019-07-22T16:56:35.783Z",
            "actor": {
                "username": "jobert",
                "cleared": true,
                "verified": true,
                "url": "/jobert",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": true
            },
            "reporter": {
                "username": "reigertje",
                "url": "/reigertje"
            },
            "genius_execution_id": null,
            "team_handle": "security"
        },
        {
            "id": 5389425,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2019-07-22T16:58:46.381Z",
            "updated_at": "2019-07-22T16:58:46.381Z",
            "first_to_agree": true,
            "actor": {
                "username": "jobert",
                "cleared": true,
                "verified": true,
                "url": "/jobert",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": true
            },
            "genius_execution_id": null,
            "team_handle": "security"
        },
        {
            "id": 5396628,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2019-07-23T07:21:54.383Z",
            "updated_at": "2019-07-23T07:21:54.383Z",
            "actor": {
                "username": "reigertje",
                "cleared": false,
                "verified": false,
                "url": "/reigertje",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/345/154/1f8f4dc007e770f2363d19c9cfb75b1e83413cbf_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": true
            },
            "genius_execution_id": null,
            "team_handle": "security"
        },
        {
            "id": 5396629,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ReportBecamePublic",
            "message": "",
            "automated_response": false,
            "created_at": "2019-07-23T07:21:54.491Z",
            "updated_at": "2019-07-23T07:21:54.491Z",
            "actor": {
                "username": "reigertje",
                "cleared": false,
                "verified": false,
                "url": "/reigertje",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/345/154/1f8f4dc007e770f2363d19c9cfb75b1e83413cbf_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": true
            },
            "genius_execution_id": null,
            "team_handle": "security"
        }
    ],
    "activity_page_count": 1,
    "activity_page_number": 1,
    "summaries": [
        {
            "category": "team",
            "can_view?": true,
            "can_create?": false
        },
        {
            "category": "researcher",
            "can_view?": true,
            "can_create?": false
        }
    ]
}